openapi: 3.0.0
info:
  title: Lightelligence API
  version: 1.0.0
  description: API Specification of OSRAM Lightelligence
  contact:
    email: support@lightelligence.io
servers:
  - url: 'https://api.lightelligence.io/v1'
    description: Production Environment
x-olt-servers:
  id: &ref_193
    url: 'https://id.lightelligence.io/v1'
    description: OAuth2 Production Environment
security:
  - oAuthSample: []
components:
  securitySchemes:
    oAuthSample:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: >-
            https://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/auth
          tokenUrl: >-
            https://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/token
          userInfoUrl: >-
            https://id.lightelligence.io/v1/id/auth/realms/olt/protocol/openid-connect/userinfo
          scopes: []
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    MetaDataPaging: &ref_127
      type: object
      description: Common metadata for the payload.
      required:
        - page
        - pageSize
      properties:
        page:
          type: integer
          description: The actual returned number of the page.
        pageSize:
          type: integer
          description: The used page size.
        itemsTotal:
          type: integer
          description: Total number of items.
        pagesTotal:
          type: integer
          description: Total number of pages with current size.
    MetaDataPagingTotal: &ref_329
      type: object
      additionalProperties: false
      description: common meta data for the payload.
      required:
        - page
        - pageSize
        - itemsTotal
        - pagesTotal
      properties:
        page:
          type: integer
          description: The actual returned number of the page.
        pageSize:
          type: integer
          description: The used page size.
        itemsTotal:
          type: integer
          description: The total size of the data requested
        pagesTotal:
          type: integer
          description: >-
            The total number of available pages calculated from pageSize and
            itemsTotal
    IdError: &ref_142
      type: object
      additionalProperties: false
      required:
        - errorMessage
        - errorCode
      properties:
        errorMessage:
          type: string
          description: Error message with futher details.
        errorCode: &ref_0
          type: string
          description: These codes are specific to services
          enum:
            - ID_VALIDATION
            - ID_RESOURCE_NOT_FOUND
            - ID_NO_ACCESS_TO_RESOURCE
            - ID_FORBIDDEN
            - ID_CONFLICT
            - ID_MAINTENANCE
            - ID_TENANT_INVALID
            - ID_TENANT_SUSPENDED
            - ID_APP_INVALID
            - INVALID_TOKEN
            - NO_ACCESS_TO_RESOURCE
    IdErrorCode: *ref_0
    User:
      type: object
      additionalProperties: true
      required:
        - id
        - firstName
        - lastName
        - email
        - enabled
        - emailVerified
        - attributes
      properties:
        id: &ref_39
          description: The ID of the user
          type: string
          format: uuid
          readOnly: true
          example: 123e4567-e89b-12d3-a456-426655440000
        firstName:
          description: The firstname of the user
          type: string
          example: Richard
        lastName:
          description: The lastname of the user
          type: string
          example: Feynman
        email: &ref_38
          description: The email of the user
          type: string
          format: email
          example: foo@bar.com
        enabled:
          description: Whether the user account is enabled
          type: boolean
          example: true
        emailVerified:
          description: Whether the users' email is verified
          type: boolean
          example: true
        attributes:
          description: Additional user attributes
          type: object
          additionalProperties: true
          required:
            - emailContactAgreement
            - ageVerification
            - country
            - company
            - privacyStatementAgreement
          properties:
            emailContactAgreement: &ref_1
              type: array
              items:
                type: string
                enum:
                  - 'on'
                  - 'off'
              minItems: 1
              maxItems: 1
              example:
                - 'on'
            ageVerification: *ref_1
            country: &ref_2
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 1
              example:
                - Germany
            company: *ref_2
            privacyStatementAgreement: *ref_1
    PackageId: &ref_29
      type: string
      description: 'Package identifier, selectable for a tenant'
      example: OLT_FREE2019
    UserPackageAvailable: &ref_31
      type: boolean
      description: Determines whether a package is available for order
    PackageName: &ref_30
      type: string
      description: Display name of the package
      example: Standard
    TenantId: &ref_110
      type: string
      description: The ID of the tenant
      format: uuid
      example: 570e0a66-974b-40dd-8108-844da77719e9
    TenantName: &ref_4
      type: string
      minLength: 3
      maxLength: 32
      description: The name of the tenant
      example: OSRAM
    PermissionName: &ref_18
      type: string
      minLength: 3
      maxLength: 255
      description: >
        The human readable name of the permission, used in the Permission
        Management User Interface
      example: Read Device
      pattern: '^([a-zA-Z0-9_\- ]+)$'
    PermissionAlias: &ref_14
      type: string
      minLength: 3
      maxLength: 255
      description: >
        A computer readable identifier for the permission which will be used by
        the developers application
      example: 'devicetypes:read'
    PermissionId: &ref_13
      type: string
      format: uuid
      description: 'Unique ID of a permission, generated by the platform'
      example: 6e0c9341-02a0-43ad-a213-989f8c8a870f
    CustomPermissionId: &ref_131
      type: string
      format: uuid
      description: 'Unique ID of a custom permission, generated by the platform'
      example: 6e0c9341-02a0-43ad-a213-989f8c8a870f
    PermissionDescription: &ref_19
      type: string
      description: >
        A human readable description of the purpose of the permission, used in
        the Custom Role Management User Interface
    PermissionCategory: &ref_17
      type: string
      minLength: 3
      maxLength: 32
      description: >
        Used to group related permissions in the Custom Role Management User
        Interface for better overview
      example: Devices
      pattern: '^([a-zA-Z0-9_\- ]+)$'
    ApplicationId: &ref_97
      readOnly: true
      type: string
      description: The ID of the application
      format: uuid
      example: 570e0a66-974b-40dd-8108-844da77719e9
    Category: &ref_21
      type: string
      minLength: 3
      maxLength: 32
      description: The name of the category
      example: Devices
      pattern: '^([a-zA-Z0-9_\- ]+)$'
    InviteStatus: &ref_34
      type: string
      description: The status shows if the user accepted or declined the invite.
      example: open
      enum:
        - open
        - accepted
        - declined
    ApplicationInstallationStatus: &ref_27
      type: string
      enum:
        - ok
        - outdated
    RoleId: &ref_10
      description: UUID of a tenant role
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426655440000
    RoleName: &ref_11
      type: string
      minLength: 3
      maxLength: 32
      description: The name of the role
      example: Devices
      pattern: '^([a-zA-Z0-9_\- ]+)$'
    RoleDescription: &ref_12
      type: string
      description: Description of the role
    CreatedAt: &ref_24
      type: string
      format: date-time
      description: The date when the entity was created
      example: '2018-10-30T09:47:59+00:00'
      readOnly: true
    UpdatedAt: &ref_25
      type: string
      format: date-time
      description: The date when the entity was last updated
      example: '2018-10-30T09:47:59+00:00'
      readOnly: true
    TenantContractId: &ref_3
      type: string
      description: Billing related contract id of the tenant
      maxLength: 127
      example: SAP-123
    TenantContractIdInQuery: &ref_132
      allOf:
        - *ref_3
        - minLength: 1
    TenantPostPayload: &ref_166
      type: object
      additionalProperties: false
      description: Tenant Representation on Creation
      required:
        - id
        - name
        - billingContact
        - billingCompany
        - package
        - payment
      properties:
        id: &ref_5
          type: string
          format: uuid
          description: Tenant Id
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        name: *ref_4
        billingContact: &ref_6
          type: object
          additionalProperties: false
          description: The contact information of the person respnsible for the billing
          required:
            - title
            - firstname
            - lastname
            - email
          properties:
            title:
              type: string
              enum:
                - Mr.
                - Mrs.
                - Ms.
              description: The title of the contact
              example: Ms.
            firstname:
              type: string
              minLength: 1
              maxLength: 40
              description: The firstname of the contact
            lastname:
              minLength: 1
              maxLength: 40
              type: string
              description: The lastname of the contact
            email:
              type: string
              format: email
              description: The email of the contact
              example: FSB000018@fsb.com
            phoneCountryPrefix:
              description: 2-letter country prefix for the phone number
              type: string
              example: DE
            phone:
              type: string
              minLength: 1
              maxLength: 40
              description: The phone number of the contact
              example: '12323131329'
        billingCompany: &ref_7
          type: object
          additionalProperties: false
          description: The company information of the billing company
          required:
            - name1
            - street
            - housenum
            - postcode
            - city
            - countryCode
          properties:
            name1:
              type: string
              minLength: 1
              maxLength: 40
              description: Name of the company
            name2:
              type: string
              minLength: 1
              maxLength: 40
              description: Second name of the company
            street:
              type: string
              minLength: 1
              maxLength: 40
              description: The street address
              example: Burgweg
            housenum:
              type: string
              minLength: 1
              maxLength: 8
              description: The house number
              example: 13B
            postcode:
              type: string
              minLength: 1
              maxLength: 15
              description: The postal code of the address
              example: '52800'
            city:
              type: string
              minLength: 1
              maxLength: 40
              description: The city of the address
              example: Berlin
            countryCode:
              description: 2-letter country code of the address
              type: string
              example: DE
            vat:
              type: string
              minLength: 1
              maxLength: 12
              description: The VAT registration number of the company
              example: '123456789'
        package: &ref_8
          type: object
          additionalProperties: false
          description: Package id of a tenant
          required:
            - id
          properties:
            id:
              type: string
              description: 'Package identifier, selectable for a tenant'
              example: OLT_FREE2019
        payment: &ref_9
          type: object
          additionalProperties: false
          description: >-
            Payment details needed to process a payment with Adyen. Adyen is a
            global payment company that allows businesses to accept e-commerce,
            mobile, and point-of-sale payments.

            For more information about Adyen development you can check their
            [documentation](https://docs.adyen.com/developers)
          required:
            - shopperReference
            - recurringDetailReference
          properties:
            shopperReference:
              type: string
              format: uuid
              description: Tenant identifier for Adyen operations
              example: bde5f1b5-c0bf-49a8-b01d-f57459579124
              minLength: 1
            recurringDetailReference:
              type: string
              description: Identifier for the tenants's tokenized payment details
              example: '8415531819451433'
              minLength: 1
        contractId: *ref_3
    TenantPostPayloadAdmin:
      type: object
      additionalProperties: false
      description: Tenant Representation on Creation
      required:
        - id
        - name
        - billingContact
        - billingCompany
        - package
      properties:
        id: *ref_5
        name: *ref_4
        billingContact: *ref_6
        billingCompany: *ref_7
        package: *ref_8
        payment: *ref_9
        contractId: *ref_3
    PutRolesToTenantUser: &ref_191
      type: array
      items:
        type: object
        additionalProperties: false
        description: List of roles with role id property
        required:
          - id
        properties:
          id: *ref_10
    RolePostPayload: &ref_184
      type: object
      additionalProperties: false
      description: Role Representation on Creation
      required:
        - name
      properties:
        name: *ref_11
        description: *ref_12
        permissions:
          type: array
          items: &ref_15
            type: object
            additionalProperties: false
            properties:
              id: *ref_13
              alias:
                allOf:
                  - *ref_14
                  - deprecated: true
        customPermissions:
          type: array
          items: &ref_16
            type: object
            additionalProperties: false
            required:
              - id
            properties:
              id: *ref_13
    RolePatchPayload: &ref_188
      type: object
      additionalProperties: false
      description: Role representation for updates
      properties:
        name: *ref_11
        description: *ref_12
        permissions:
          type: array
          items: *ref_15
        customPermissions:
          type: array
          items: *ref_16
    RolePermissionPayload: *ref_15
    RoleCustomPermissionPayload: *ref_16
    CustomPermissionsPostPayload: &ref_178
      type: object
      additionalProperties: false
      description: >-
        Custom permission creation payload. A custom permission is managed by an
        application developer and assigned to custom roles within tenants that
        have installed the application.
      required:
        - alias
        - category
        - name
      properties:
        alias: *ref_14
        category: *ref_17
        name: *ref_18
        description: *ref_19
    CustomPermissionsPatchPayload: &ref_182
      type: object
      additionalProperties: false
      description: Custom permission update payload
      properties:
        category: *ref_17
        description: *ref_19
    RoleDetailsResponse: &ref_185
      type: object
      additionalProperties: false
      description: Role Representation on Creation
      required:
        - id
        - name
        - description
        - locked
        - usersCount
        - permissionIds
        - createdAt
        - updatedAt
      properties:
        id: *ref_10
        name: *ref_11
        description: *ref_12
        locked:
          type: boolean
          default: false
          description: Defines if the role is modifiable
        usersCount:
          type: integer
          nullable: false
          description: Number of members assigned to this role
          example: 100
        permissionIds:
          type: array
          items: *ref_13
        customPermissions:
          type: array
          items: &ref_20
            type: object
            additionalProperties: false
            description: Basic custom permission data
            required:
              - id
              - alias
              - applicationId
            properties:
              id: *ref_13
              alias: *ref_14
              applicationId: &ref_23
                type: string
                format: uuid
                description: UUID of application
                example: 123e4567-e89b-12d3-a456-426655440000
        createdAt:
          type: string
          format: date-time
          description: The date when the role was created
          example: '2018-10-30T09:47:59+00:00'
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: The date when a role was changed
          example: '2018-10-30T09:47:59+00:00'
          readOnly: true
    RolePatchResponse: &ref_189
      type: object
      additionalProperties: false
      description: >
        Role Representation after an Update. The role only contains those
        properties which were part of the request (besides `id` and `updatedAt`
        which are always provided).
      required:
        - id
        - updatedAt
      properties:
        id: *ref_10
        name: *ref_11
        description: *ref_12
        permissionIds:
          type: array
          items: *ref_13
        customPermissions:
          type: array
          items: *ref_20
        updatedAt:
          type: string
          format: date-time
          description: The date when a role was changed
          example: '2018-10-30T09:47:59+00:00'
          readOnly: true
    PermissionResponse: &ref_177
      type: object
      description: Permission Representation
      additionalProperties: false
      required:
        - id
        - alias
        - name
        - category
        - description
      properties:
        id: *ref_13
        alias: *ref_14
        name: *ref_18
        category: *ref_21
        description: *ref_19
    BasicPermissionResponse: &ref_157
      type: object
      description: Permission Identification Representation
      additionalProperties: false
      required:
        - id
        - alias
      properties:
        id: *ref_13
        alias: *ref_14
    TenantResponse: &ref_170
      type: object
      additionalProperties: false
      description: Tenant Representation
      required:
        - id
        - name
        - billingContact
        - billingCompany
        - package
        - status
      properties:
        id: *ref_5
        name: *ref_4
        billingContact: *ref_6
        billingCompany: *ref_7
        package: *ref_8
        status: &ref_22
          type: object
          additionalProperties: false
          description: status of tenant
          required:
            - code
          properties:
            code: &ref_28
              type: string
              description: status of tenant
              enum:
                - suspended
                - active
            reason:
              type: string
              description: reason for status
              example: You have unpaid bills
        payment: *ref_9
        contractId: *ref_3
    TenantPostResponse: &ref_167
      type: object
      additionalProperties: false
      description: Tenant representation after creation
      required:
        - id
        - name
        - billingContact
        - billingCompany
        - package
        - status
      properties:
        id: *ref_5
        name: *ref_4
        billingContact: *ref_6
        billingCompany: *ref_7
        package: *ref_8
        status: *ref_22
        payment: *ref_9
        contractId: *ref_3
    TenantBasicResponse:
      type: object
      description: Tenant Representation
      additionalProperties: false
      required:
        - id
        - name
        - status
      properties:
        id: *ref_5
        name: *ref_4
        status: *ref_22
    PatchTenant: &ref_171
      type: object
      additionalProperties: false
      description: Tenant Representation for Updates
      required:
        - id
      properties:
        id: *ref_5
        name: *ref_4
        billingContact: &ref_35
          type: object
          additionalProperties: false
          description: The contact information of the person respnsible for the billing
          required:
            - title
            - firstname
            - lastname
            - email
          properties:
            title:
              type: string
              enum:
                - Mr.
                - Mrs.
                - Ms.
              description: The title of the contact
              example: Ms.
            firstname:
              type: string
              minLength: 1
              maxLength: 40
              description: The firstname of the contact
            lastname:
              minLength: 1
              maxLength: 40
              type: string
              description: The lastname of the contact
            email:
              type: string
              format: email
              description: The email of the contact
              example: FSB000018@fsb.com
            phoneCountryPrefix:
              description: >-
                2-letter country prefix for the phone number. This value should
                be empty passed as an empty string instead of undefined.
              minLength: 0
              type: string
              example: DE
            phone:
              type: string
              minLength: 0
              maxLength: 40
              description: >-
                The phone number of the contact. This value should be empty
                passed as an empty string instead of undefined.
              example: '12323131329'
        billingCompany: &ref_36
          type: object
          additionalProperties: false
          description: The company information of the billing company
          required:
            - name1
            - street
            - housenum
            - postcode
            - city
            - countryCode
          properties:
            name1:
              type: string
              minLength: 1
              maxLength: 40
              description: Name of the company
            name2:
              type: string
              minLength: 0
              maxLength: 40
              description: >-
                Second name of the company. This value should be empty passed as
                an empty string instead of undefined.
            street:
              type: string
              minLength: 1
              maxLength: 40
              description: The street address
              example: Burgweg
            housenum:
              type: string
              minLength: 1
              maxLength: 8
              description: The house number
              example: 13B
            postcode:
              type: string
              minLength: 1
              maxLength: 15
              description: The postal code of the address
              example: '52800'
            city:
              type: string
              minLength: 1
              maxLength: 40
              description: The city of the address
              example: Berlin
            countryCode:
              description: 2-letter country code of the address
              type: string
              example: DE
            vat:
              type: string
              minLength: 0
              maxLength: 12
              description: >-
                The VAT registration number of the company. This value should be
                empty passed as an empty string instead of undefined.
              example: '123456789'
        package: *ref_8
        payment: *ref_9
        contractId: *ref_3
    TenantRoleWithoutTimestamps: &ref_26
      type: object
      additionalProperties: false
      description: Role of a tenant without timestamps
      required:
        - id
        - name
        - description
        - locked
      properties:
        id: *ref_10
        name:
          type: string
          description: The name of the role
          example: owner
          readOnly: true
        description:
          type: string
          description: The description of the role
          example: Owner
          readOnly: true
        locked:
          type: boolean
          description: Defines if the role is modifiable
    CustomPermissionResponse: &ref_179
      type: object
      additionalProperties: false
      description: >
        A custom permission that is managed by application-developers and
        assigned to custom roles within tenants that have installed the
        application.
      required:
        - id
        - alias
        - name
        - applicationId
        - category
      properties:
        id: *ref_13
        alias: *ref_14
        category: *ref_17
        name: *ref_18
        description: *ref_19
        applicationId: *ref_23
        createdAt: *ref_24
        updatedAt: *ref_25
    BasicCustomPermission: *ref_20
    CustomPermissionPatchResponse: &ref_183
      type: object
      additionalProperties: false
      description: The updated values
      required:
        - id
        - updatedAt
      properties:
        id: *ref_13
        category: *ref_17
        description: *ref_19
        updatedAt: *ref_25
    ContractResponse:
      type: object
      additionalProperties: false
      description: a Contract object
      required:
        - id
      properties:
        id: *ref_3
    TenantRole: &ref_172
      type: object
      additionalProperties: false
      description: Role of a tenant
      required:
        - name
        - description
        - createdAt
        - updatedAt
      properties:
        id: *ref_10
        name:
          type: string
          description: The name of the role
          example: owner
          readOnly: true
        description:
          type: string
          description: The description of the role
          example: Owner
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: The date when the role was created
          example: '2018-10-30T09:47:59+00:00'
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: The date when a role was changed
          example: '2018-10-30T09:47:59+00:00'
          readOnly: true
    UserOfTenant: &ref_176
      type: object
      additionalProperties: false
      description: User of a tenant
      required:
        - id
        - email
        - firstName
        - lastName
        - userRoles
      properties:
        id:
          type: string
          format: uuid
          description: The UUID of the user
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        email:
          type: string
          format: email
          description: The e-mail of the user
          example: foo@bar.com
        firstName:
          type: string
          description: The first name of the user
          example: Richard
        lastName:
          type: string
          description: The last name of the user
          example: Feynman
        userRoles:
          type: array
          description: User roles for the tenant
          items: *ref_26
        twoFactorAuthEnabled:
          type: boolean
          description: Whether or not two-factor authentication is enabled (TOTP)
          example: true
          readOnly: true
    UserInRoleResponse: &ref_190
      type: object
      additionalProperties: false
      description: User of a tenant
      required:
        - id
        - email
        - firstName
        - lastName
        - roleIds
      properties:
        id:
          type: string
          format: uuid
          description: The UUID of the user
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        email:
          type: string
          format: email
          description: The e-mail of the user
          example: foo@bar.com
        firstName:
          type: string
          description: The first name of the user
          example: Richard
        lastName:
          type: string
          description: The last name of the user
          example: Feynman
        roleIds:
          type: array
          description: User roles for the tenant
          items: *ref_10
    TenantOfUser: &ref_151
      type: object
      additionalProperties: false
      description: |
        Basic information of a tenant including user roles for the tenant
      required:
        - id
        - name
        - status
        - userRoles
        - applicationInstallationStatus
      properties:
        id: *ref_5
        name: *ref_4
        status: *ref_22
        userRoles:
          type: array
          description: User roles for the tenant
          items: *ref_26
        applicationInstallationStatus: *ref_27
    TenantOfUserInternal:
      type: object
      additionalProperties: false
      description: |
        Basic information of a tenant including user roles for the tenant
      required:
        - id
        - name
        - status
        - userRoles
      properties:
        id: *ref_5
        name: *ref_4
        status: *ref_22
        userRoles:
          type: array
          description: User roles for the tenant
          items: *ref_26
    TenantPackage: *ref_8
    PaymentDetails: *ref_9
    TenantStatusCode: *ref_28
    TenantStatus: *ref_22
    Package:
      type: object
      additionalProperties: false
      description: Lightelligence package
      required:
        - id
        - name
        - limits
      properties:
        id: *ref_29
        name: *ref_30
        limits: &ref_32
          type: object
          additionalProperties: false
          description: Allowed volume for the package
          required:
            - users
            - devices
          properties:
            users:
              type: integer
              nullable: true
              description: Number of users included in the package
              example: 15
            devices:
              type: integer
              nullable: true
              description: Number of devices included in the package
              example: 1000
    UserPackage:
      type: object
      additionalProperties: false
      description: Lightelligence package
      required:
        - id
        - available
        - name
        - limits
      properties:
        id: *ref_29
        available: *ref_31
        name: *ref_30
        limits: *ref_32
    PackageLimits: *ref_32
    InviteRequest: &ref_173
      type: object
      additionalProperties: false
      description: Invite object to use in request body for creating invite
      required:
        - receiverEmail
      properties:
        receiverEmail:
          type: string
          format: email
          description: The email address of the invited user.
          example: iron@man.com
        roleNames:
          deprecated: true
          type: array
          minItems: 1
          uniqueItems: true
          description: 'Deprecated, please use `roles` instead'
          example:
            - reader
            - writer
          items:
            type: string
        roles:
          description: The IDs of the roles the user should be invited to.
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: object
            additionalProperties: false
            required:
              - id
            properties:
              id: *ref_10
    InviteId: &ref_33
      type: string
      format: uuid
      description: The primary id of the invite.
      example: 123e4567-e89b-12d3-a456-426655440000
      readOnly: true
    UserInvite: &ref_162
      type: object
      additionalProperties: false
      description: User invite object
      required:
        - id
        - receiverEmail
        - senderId
        - status
        - createdAt
        - tenant
        - roles
      properties:
        id: *ref_33
        receiverEmail:
          type: string
          format: email
          description: The email address of the invited user.
          example: iron@man.com
        senderId:
          type: string
          format: uuid
          description: The id of the user who sent the invite.
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        status: *ref_34
        createdAt:
          type: string
          format: date-time
          description: The date when the invite was sent / created.
          example: '2018-10-30T09:47:59+00:00'
          readOnly: true
        tenant:
          type: object
          additionalProperties: false
          description: tenant the user is invited to
          required:
            - id
            - name
          properties:
            id: *ref_5
            name: *ref_4
        roles:
          type: array
          description: >
            The roles associated with this invite. When creating an invite,
            these are the roles on the tenant, the user will be assigned once he
            accepted the invite.
          uniqueItems: true
          items: *ref_26
    UserInvitePatchResponse: &ref_165
      type: object
      additionalProperties: false
      description: Response of an update to an invite of a user
      required:
        - id
        - status
      properties:
        id: *ref_33
        status: *ref_34
    UserInviteStatus: &ref_164
      type: object
      additionalProperties: false
      description: invite of a user to a tenant
      required:
        - status
      properties:
        status: *ref_34
    EnrichedToken:
      type: object
      additionalProperties: false
      description: enriched token with permissions
      required:
        - token
      properties:
        token:
          type: string
          description: Enriched JWT token
    BillingContact: *ref_6
    PatchBillingContact: *ref_35
    BillingCompany: *ref_7
    PatchBillingCompany: *ref_36
    PublicKey: &ref_192
      description: The public key of the this instance
      type: string
      example: >-
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjD3labyD/J7o6CWrWSbrDg90nY9YD40dAG1IJVixKxHIZc1u/yOUWHFSeGUlf39cuMKZuj82wJpHKuFLDnh/B9ckvq93VebEHtOwv/P1KavaSimoyZQ49k+K3sRX+6zTY0/udK9S+hKQfJOjmFRXM515efUYJyJ5gBgCvw16RAEgDE2IhfXUf6trcOwiJj2OBvIglutup4iSO99SFmMoY+23MQ0zU9fGTx7vbcygBJAhbnHQlFElPCo6pqWpuAl5Wi7xaddIFG7apRESNKFZBJHzLV2JQac/arCMJOX3HRTK19dZpasLbUJ9lwj7XLT8Kk7h9FdBX4ImD+aTryF6CQIDAQAB
    Scope: &ref_37
      description: >
        Space delimited list of scopes. When requesting an access token the
        scope `openid` must be used to ensure the responding `access_token` is
        fully valid. <br /> **Optional scopes:** <br />`email` - includes email
        in auth session. <br />`profile` - includes profile info (eg firstname,
        lastname) in auth session.
      type: string
      example: openid profile email
    PostTokenResponse: &ref_196
      type: object
      additionalProperties: true
      properties:
        access_token:
          description: Access Token for authenticating with the OLT platform
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.dozjgNryP4J3jVmNHl0w5N_XgL0n3I9PlFUP0THsR8U
        expires_at:
          description: Date time when the `access_token` will not be valid anymore
          type: string
          format: date-time
        refresh_token:
          description: Refresh Token to get a new Access Token
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.dozjgNryP4J3jVmNHl0w5N_XgL0n3I9PlFUP0THsR8U
        scope: *ref_37
    UserInfoResponse: &ref_198
      type: object
      additionalProperties: true
      required:
        - sub
      properties:
        sub:
          type: string
          description: The ID of the user identified by the provided token
          format: uuid
          readOnly: true
          example: 123e4567-e89b-12d3-a456-426655440000
        emailVerified:
          description: Whether the users' email is verified
          type: boolean
          example: true
        name:
          description: The firstname and lastname of the user
          type: string
          example: Richard Feynman
        preferred_username: *ref_38
        given_name:
          description: The firstname of the user
          type: string
          example: Richard
        family_name:
          description: The lastname of the user
          type: string
          example: Feynman
        tenant:
          type: string
          format: uuid
          description: The current tenant's ID
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        email: *ref_38
        twoFactorAuthEnabled:
          type: boolean
          description: Whether or not two-factor authentication is enabled (TOTP)
          example: true
          readOnly: true
    OAuthGrantType: &ref_195
      description: OAuth2 grant types supported by OLT
      type: string
      enum:
        - authorization_code
        - client_credentials
        - id_token
        - refresh_token
    KeycloakError: &ref_197
      type: object
      additionalProperties: false
      required:
        - error
        - error_description
      properties:
        error:
          type: string
          description: Error Code
        error_description:
          type: string
          description: Error message with further details
    BooleanUserAttribute: *ref_1
    StringUserAttribute: *ref_2
    UserId: *ref_39
    UserEmail: *ref_38
    ClientIId: &ref_40
      description: __id__ of the oauth client (not clientId)
      type: string
      example: 634563c4-0346-4b00-b2df-31fe96539c69
    ClientId: &ref_41
      description: __clientId__ of the oauth client (not id)
      type: string
      example: 634563c4-0346-4b00-b2df-31fe96539c69
    ClientName: &ref_42
      description: Name of the client
      type: string
      example: My Great OAuth Client
    ClientRedirectUris: &ref_43
      description: Valid redirect URIs for OAuth flow
      type: array
      items:
        type: string
        format: uri
      example:
        - 'https://127.0.0.1:8080/auth/callback'
    ClientPostPayload:
      type: object
      additionalProperties: true
      properties:
        id: *ref_40
        clientId: *ref_41
        name: *ref_42
        secret:
          description: Client secret
          type: string
        enabled:
          type: boolean
        directAccessGrantsEnabled:
          type: boolean
        authorizationServicesEnabled:
          type: boolean
        implicitFlowEnabled:
          type: boolean
        standardFlowEnabled:
          type: boolean
        serviceAccountsEnabled:
          type: boolean
        publicClient:
          type: boolean
        consentRequired:
          type: boolean
        clientAuthenticatorType:
          type: string
          enum:
            - client-secret
        fullScopeAllowed:
          type: boolean
        defaultClientScopes:
          type: array
          items:
            type: string
          example:
            - olt-applications
        optionalClientScopes:
          type: array
          items:
            type: string
          example:
            - profile
            - email
        defaultRoles:
          type: array
          items:
            type: string
          example: []
        protocolMappers:
          type: array
          items:
            type: object
          example: []
        redirectUris: *ref_43
        webOrigins:
          type: array
          items:
            type: string
          example:
            - '*'
    ClientGetResponse:
      type: object
      additionalProperties: true
      required:
        - id
        - clientId
        - name
        - redirectUris
      properties:
        id: *ref_40
        clientId: *ref_41
        name: *ref_42
        redirectUris: *ref_43
    ClientPutPayload:
      type: object
      additionalProperties: true
      required:
        - clientId
      properties:
        clientId: *ref_41
        name: *ref_42
        redirectUris: *ref_43
    DeviceType: &ref_199
      type: object
      description: Device type definition
      required:
        - id
        - name
        - schema
      additionalProperties: false
      properties:
        id:
          description: Device type UUID
          type: string
          format: uuid
          readOnly: true
        name:
          description: Name of the device type
          type: string
          example: Extended OSR Light switch
          maxLength: 255
        manufacturer:
          type: string
          description: The manufacurer of the device.
          example: OSRAM
          maxLength: 255
        model:
          type: string
          description: The model of the device
          example: C3PO
          maxLength: 255
        description:
          type: string
          description: A descriptive text.
          example: Newest version of the switch.
          maxLength: 255
        categories: &ref_50
          type: array
          description: External specifications the device conforms to
          example: &ref_45
            - 'urn:oma:lwm2m:ext:3001'
            - 'urn:oma:example:ext:1002'
            - 'urn:oma:example:ext:1003'
          items: &ref_46
            type: string
            format: uri
            example: 'urn:oma:lwm2m:ext:3001'
          uniqueItems: true
        reportingRules: &ref_51
          description: >-
            Reporting rules for various attributes or configuration keys of the
            device. Unless specified, everything is reported to deviceManagement
          type: array
          items: &ref_47
            type: object
            properties:
              path:
                type: string
                description: >-
                  JSON Path for the attribute or configuration key the rule is
                  for
                pattern: ^(\$\.configuration\.|\$\.attributes\.)
                example: $.configuration.brightness
              reportTo:
                type: array
                description: >-
                  Which services to report the value to. Values have to be
                  scalar.
                items:
                  type: string
                  enum:
                    - timeseries
                    - deviceManagement
                    - flow
                  example: timeseries
                uniqueItems: true
            additionalProperties: false
            required:
              - path
              - reportTo
          uniqueItems: true
        schema: &ref_48
          type: object
          description: JSON Schemas for the inputs and outputs of the device
          additionalProperties: false
          properties:
            configuration:
              type: object
              additionalProperties: false
              description: >-
                Configuration data structure supported by the device.
                Represented as configuration written via device management, and
                currentConfiguration written by data ingestion
              properties:
                additionalProperties:
                  type: boolean
                  default: false
                  description: >-
                    Whether unspecified properties are allowed in the device
                    schema while patching the device
                required:
                  type: array
                  description: >-
                    An array of configuration properties that are required while
                    patching device
                  items:
                    type: string
              example:
                brightness:
                  type: number
                  property: 'urn:oma:lwm2m:ext:5548'
                  minimum: 0
                  maximum: 100
                color:
                  type: object
                  properties:
                    r:
                      type: number
                      minimum: 0
                      maximum: 255
                    g:
                      type: number
                      minimum: 0
                      maximum: 255
                    b:
                      type: number
                      minimum: 0
                      maximum: 255
                  required:
                    - r
                    - g
                    - b
            attributes:
              type: object
              additionalProperties: false
              description: >-
                Values reported from device. Read-only for device management and
                only written via data ingestion
              properties:
                additionalProperties:
                  type: boolean
                  default: false
                  description: >-
                    Whether unspecified properties are allowed in the device
                    actions
                required:
                  type: array
                  description: >-
                    An array of actions that are required while sending an
                    action
                  items:
                    type: string
              example:
                temperature:
                  type: number
                  property: 'urn:oma:lwm2m:ext:5700'
                humidity:
                  type: number
                  minimum: 0
                  maximum: 100
            events:
              type: object
              additionalProperties: false
              description: >-
                Event types raised by the device type and the schema of their
                attributes. Read-only for device management and only written via
                data ingestion
              example:
                overheated:
                  type: object
                  properties:
                    temperature:
                      type: number
                alert: {}
            actions:
              type: object
              additionalProperties: false
              description: >-
                Actions supported by the device type and the schema of their
                attributes
              properties:
                additionalProperties:
                  type: boolean
                  default: false
                  description: >-
                    Whether unspecified properties are allowed in the device
                    actions
                required:
                  type: array
                  description: >-
                    An array of actions that are required while sending an
                    action
                  items:
                    type: string
              example:
                raiseTemperature:
                  type: object
                  properties:
                    value:
                      type: number
                    description:
                      type: string
        slots: &ref_49
          type: object
          description: JSON Slots for device type
          additionalProperties: false
          example:
            firmware:
              name: Test name
            bootloader:
              name: Test name
        communicationInterval: &ref_44
          type: integer
          nullable: true
          minimum: 0
          maximum: 172800
          description: >
            Expected communication interval in seconds for online monitoring of
            a device. When set to zero the online monitoring is disabled. When
            set to NULL on a device, the interval value from the associated
            device type will be inherited. When set to NULL on a device type, it
            will also disable the monitoring, unless any associated device
            overrides it with a non-zero value. Non-NULL device interval values
            always take precedence over device type interval values."
          example: 60
    OnlineMonitoring: &ref_210
      type: object
      required:
        - communicationInterval
      properties:
        communicationInterval: *ref_44
      additionalProperties: false
    DeviceTypePatch: &ref_205
      type: object
      additionalProperties: false
      properties:
        name:
          description: Name of the device type
          type: string
          minLength: 1
          maxLength: 255
          example: Extended OSR Light switch
        manufacturer:
          type: string
          description: The manufacurer of the device.
          example: OSRAM
          nullable: true
          maxLength: 255
        model:
          type: string
          description: The model of the device
          example: C3PO
          nullable: true
          maxLength: 255
        description:
          type: string
          description: A descriptive text.
          example: Newest version of the switch.
          nullable: true
          maxLength: 255
        categories:
          nullable: true
          type: array
          description: External specifications the device conforms to
          example: *ref_45
          items: *ref_46
          uniqueItems: true
        reportingRules:
          nullable: true
          description: >-
            Reporting rules for various attributes or configuration keys of the
            device. Unless specified, everything is reported to deviceManagement
          type: array
          items: *ref_47
          uniqueItems: true
        schema: *ref_48
        slots: *ref_49
        communicationInterval: *ref_44
    DeviceTypeCategories: *ref_50
    DeviceTypeReportingRules: *ref_51
    DeviceTypeSchema: *ref_48
    DeviceTypeSlots: *ref_49
    DeviceTypeSlotFirmwareAssociation: &ref_213
      type: object
      description: Device type slot firmware definition
      required:
        - id
        - deviceTypeId
        - slotName
        - firmwareId
      properties:
        id:
          description: Primary id
          type: string
          format: uuid
        deviceTypeId:
          description: Device type UUID
          type: string
          format: uuid
        slotName:
          description: Device type slot name
          type: string
          maxLength: 255
          nullable: false
          pattern: '^([a-zA-Z0-9_]+)$'
        firmwareId:
          description: Device firmware UUID
          type: string
          format: uuid
      additionalProperties: false
    Device: &ref_215
      type: object
      description: The digital twin of a device. It is defined in it's device type.
      required:
        - id
        - info
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
          description: The devices UUID.
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        info: &ref_59
          type: object
          required:
            - deviceTypeId
            - name
          additionalProperties: false
          properties:
            name:
              type: string
              description: The devices name with a maximum of 255 characters.
              maxLength: 255
              nullable: false
              example: Gateway North 1
            deviceTypeId:
              type: string
              format: uuid
              description: Id of the devicetype
              example: 123e4567-e89b-12d3-a456-426655440003
            description:
              type: string
              description: A descriptive text with a maximum of 512 characters.
              maxLength: 512
              example: 'Gateway left from the right door, under the orange pillow.'
            creationTimestamp:
              type: string
              readOnly: true
              format: date-time
              description: >-
                The timestamp when the deviceId was generated through
                registration at the cloud platform. (RFC3339)
              example: '1985-04-12T23:20:50.52Z'
            installationTimestamp:
              type: string
              format: date-time
              description: The timestamp when the device was installed. (RFC3339)
              example: '1985-04-12T23:20:50.52Z'
            tags: &ref_58
              type: array
              description: >-
                An array of tags to easily sort the devices (case insensitive
                and will be converted to lowercase).
              example: &ref_55
                - Lighthouse
                - Room123
                - Blockchain
              items: &ref_56
                type: string
                pattern: '^([a-zA-Z0-9_-]+)$'
                maxLength: 256
              uniqueItems: true
            connectedBy:
              type: string
              format: uuid
              description: 'The UUID of the device, which connects this device to the cloud.'
              example: 123e4567-e89b-12d3-a456-426655441337
            location:
              type: string
              description: >-
                Textfield for describing the location of the device with a
                maximum of 255 characters.
              maxLength: 255
              example: siteA.buildingB.floorC.roomD
            aliases:
              type: array
              description: >-
                An array of aliases for the device. Each alias must be unique
                for the same tenant.
              example:
                - frontdoor
                - RoomA
                - 06-00-00-00-00-00
              items:
                type: string
                maxLength: 255
              uniqueItems: true
            coordinates:
              type: object
              description: The coordinates of the device.
              properties:
                x:
                  description: The x coordinate
                  type: number
                  example: 22.5
                'y':
                  description: The y coordinate
                  type: number
                  example: 2.3
                z:
                  description: The z coordinate
                  type: number
                  example: 0.02
            communicationInterval: *ref_44
        configuration: &ref_57
          type: object
          description: >-
            Object describing the desired device configuration properties. If
            this is changed, the device will receive an MQTT message containing
            the new configuration.
          additionalProperties: false
          example:
            brightness: 60
            color:
              r: 255
              g: 255
              b: 10
        custom: &ref_61
          type: object
          description: Place for custom data.
          additionalProperties: false
          example:
            my:
              custom: data
    DeviceAction: &ref_229
      type: object
      description: Device action which is defined in the device type.
      required:
        - action
        - payload
      properties:
        action: &ref_52
          type: string
          description: Name of the action
          example: raiseTemperature
        payload: &ref_53
          type: object
          description: >-
            Action properties, validated against the schema actions in device
            type.
          additionalProperties: false
          example:
            value: 15
            description: The temperature is raised
      additionalProperties: false
    DeviceBulkAction: &ref_231
      type: object
      required:
        - action
        - payload
        - deviceFilter
      properties:
        action: *ref_52
        payload: *ref_53
        deviceFilter: &ref_223
          type: object
          properties:
            deviceId: &ref_54
              type: array
              description: 'A list of device ids '
              minItems: 1
              example:
                - eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
                - be838a54-5f85-4154-b8a6-81fa4cb29561
              items:
                type: string
                format: uuid
                description: The devices uuid
                example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            deviceConnectedBy: *ref_54
            deviceTag: &ref_218
              type: array
              description: A list of device tags
              minItems: 1
              example:
                - tag1
                - tag1
              items:
                type: string
                description: The devices tag
                pattern: '^[\*a-zA-Z0-9_-]+(,[\*a-zA-Z0-9_-]+)*$'
                example: tag1
            deviceName: &ref_221
              type: array
              minItems: 1
              description: >-
                A list of device names. Supports wildcards using '*'. Case
                insensitive
              example:
                - Living*
                - Bad*
              items:
                type: string
                description: The device name
            deviceTypeName: &ref_63
              type: array
              minItems: 1
              description: >-
                A list of device type names. Supports wildcards using '*'. Case
                insensitive
              example:
                - Living*
                - Bad*
              items:
                type: string
                description: The device type name
            deviceTypeCategory: &ref_64
              type: array
              description: A list of device type categories
              minItems: 1
              example:
                - 'urn:example:test1:category'
                - 'urn:example:test2:category'
              items:
                type: string
                format: uri
                description: The device type category
                example: 'urn:example:test1:category'
            deviceTypeId: &ref_65
              type: array
              description: A list of device type ids
              minItems: 1
              example:
                - e41bcf5e-2a4e-435a-8387-4617cd52b194
                - f86579db-f403-4ce1-b782-f1978733ef9b
              items:
                type: string
                format: uuid
                description: The device type uuid
                example: e41bcf5e-2a4e-435a-8387-4617cd52b194
            deviceAlias: &ref_222
              type: array
              minItems: 1
              description: A list of device aliases. Supports wildcards using '*'
              example:
                - Living*
                - Bad*
              items:
                type: string
                description: The device alias
          additionalProperties: false
      additionalProperties: false
    DevicePatch: &ref_228
      type: object
      description: The digital twin of a device. It is defined in it's device type.
      example:
        info:
          name: Change Device name
        configuration:
          brightness: 100
      properties:
        info: &ref_60
          type: object
          properties:
            name:
              type: string
              description: The devices name with a maximum of 255 characters.
              maxLength: 255
              minLength: 1
              nullable: false
              example: Gateway North 1
            deviceTypeId:
              type: string
              format: uuid
              description: Id of the devicetype
              example: 123e4567-e89b-12d3-a456-426655440003
            description:
              type: string
              description: A descriptive text with a maximum of 512 characters.
              nullable: true
              maxLength: 512
              example: 'Gateway left from the right door, under the orange pillow.'
            installationTimestamp:
              type: string
              format: date-time
              description: The timestamp when the device was installed. (RFC3339)
              nullable: true
              example: '1985-04-12T23:20:50.52Z'
            tags:
              nullable: true
              type: array
              description: >-
                An array of tags to easily sort the devices (case insensitive
                and will be converted to lowercase).
              example: *ref_55
              items: *ref_56
              uniqueItems: true
            connectedBy:
              type: string
              format: uuid
              description: 'The UUID of the device, which connects this device to the cloud.'
              example: 123e4567-e89b-12d3-a456-426655441337
              nullable: true
            location:
              type: string
              description: >-
                Textfield for describing the location of the device with a
                maximum of 255 characters.
              nullable: true
              maxLength: 255
              example: siteA.buildingB.floorC.roomD
            aliases:
              type: array
              description: >-
                An array of aliases for the device. Each alias must be unique
                for the same tenant.
              example:
                - frontdoor
                - RoomA
                - 06-00-00-00-00-00
              items:
                type: string
              uniqueItems: true
              nullable: true
            coordinates:
              type: object
              description: The coordinates of the device.
              nullable: true
              properties:
                x:
                  description: The x coordinate
                  nullable: true
                  type: number
                  example: 22.5
                'y':
                  description: The y coordinate
                  nullable: true
                  type: number
                  example: 2.3
                z:
                  description: The z coordinate
                  nullable: true
                  type: number
                  example: 0.02
            communicationInterval: *ref_44
          additionalProperties: false
        configuration: *ref_57
        tags: *ref_58
        custom:
          type: object
          description: Place for custom data.
          example:
            my:
              custom: data
      additionalProperties: false
    DeviceSmall: &ref_225
      type: object
      description: The digital twin of a device. It is defined in it's device type.
      required:
        - id
        - info
      properties:
        id:
          type: string
          format: uuid
          description: The devices UUID.
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        info: *ref_59
      additionalProperties: false
    DeviceInfo: *ref_59
    DeviceInfoPatch: *ref_60
    DeviceConfiguration: *ref_57
    DeviceCustom: *ref_61
    Tag: &ref_226
      type: object
      description: A tag.
      required:
        - name
      properties:
        name:
          type: string
          pattern: '^([a-zA-Z0-9_-]+)$'
          description: The name of a tag.
          example: tag1
          maxLength: 256
      additionalProperties: false
    DeviceTag: *ref_58
    CommunicationInterval: *ref_44
    Error: &ref_140
      type: object
      required:
        - errorMessage
      properties:
        errorMessage:
          type: string
          description: Error message with futher details.
    ActionAcceptedResponse: &ref_144
      type: object
      properties:
        data:
          type: object
          properties:
            actionId:
              type: string
              format: uuid
              description: UUID for the action request which is used for tracing.
          additionalProperties: false
      additionalProperties: false
    DeviceIdArray: &ref_73
      type: array
      description: 'A list of device ids '
      minItems: 1
      example:
        - eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
        - be838a54-5f85-4154-b8a6-81fa4cb29561
      items:
        type: string
        format: uuid
        description: The devices uuid
        example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
    TagsArray: &ref_74
      type: array
      description: A list of device tags
      minItems: 1
      example:
        - tag1
        - tag1
      items:
        type: string
        description: The devices tag
        pattern: '^[\*a-zA-Z0-9_-]+(,[\*a-zA-Z0-9_-]+)*$'
        example: tag1
    DeviceNameArray: &ref_75
      type: array
      minItems: 1
      description: A list of device names. Supports wildcards using '*'. Case insensitive
      example:
        - Living*
        - Bad*
      items:
        type: string
        description: The device name
    DeviceTypeNameArray: &ref_76
      type: array
      minItems: 1
      description: >-
        A list of device type names. Supports wildcards using '*'. Case
        insensitive
      example:
        - Living*
        - Bad*
      items:
        type: string
        description: The device type name
    CategoriesArray: &ref_77
      type: array
      description: A list of device type categories
      minItems: 1
      example:
        - 'urn:example:test1:category'
        - 'urn:example:test2:category'
      items:
        type: string
        format: uri
        description: The device type category
        example: 'urn:example:test1:category'
    DeviceTypeIdArray: &ref_78
      type: array
      description: A list of device type ids
      minItems: 1
      example:
        - e41bcf5e-2a4e-435a-8387-4617cd52b194
        - f86579db-f403-4ce1-b782-f1978733ef9b
      items:
        type: string
        format: uuid
        description: The device type uuid
        example: e41bcf5e-2a4e-435a-8387-4617cd52b194
    AliasesArray: &ref_79
      type: array
      minItems: 1
      description: A list of device aliases. Supports wildcards using '*'
      example:
        - Living*
        - Bad*
      items:
        type: string
        description: The device alias
    DeviceFilterBody: &ref_241
      type: object
      additionalProperties: false
      properties:
        deviceId: &ref_62
          type: array
          description: 'A list of device ids '
          minItems: 1
          example:
            - eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            - be838a54-5f85-4154-b8a6-81fa4cb29561"
          items:
            type: string
            format: uuid
            description: The devices uuid
            example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
        deviceConnectedBy: *ref_62
        deviceTag: &ref_133
          type: array
          description: A list of device tags
          minItems: 1
          example:
            - tag1
            - tag1
          items:
            type: string
            description: The devices tag
            pattern: '^[\*a-zA-Z0-9_-]+(,[\*a-zA-Z0-9_-]+)*$'
            example: tag1
        deviceName: &ref_134
          type: array
          minItems: 1
          description: >-
            A list of device names. Supports wildcards using '*'. Case
            insensitive
          example:
            - Living*
            - Bad*
          items:
            type: string
            description: The device name
        deviceTypeName: &ref_135
          type: array
          minItems: 1
          description: >-
            A list of device type names. Supports wildcards using '*'. Case
            insensitive
          example:
            - Living*
            - Bad*
          items:
            type: string
            description: The device type name
        deviceTypeCategory: &ref_136
          type: array
          description: A list of device type categories
          minItems: 1
          example:
            - 'urn:example:test1:category'
            - 'urn:example:test2:category'
          items:
            type: string
            format: uri
            description: The device type category
            example: 'urn:example:test1:category'
        deviceTypeId: &ref_137
          type: array
          description: A list of device type ids
          minItems: 1
          example:
            - e41bcf5e-2a4e-435a-8387-4617cd52b194
            - f86579db-f403-4ce1-b782-f1978733ef9b
          items:
            type: string
            format: uuid
            description: The device type uuid
            example: e41bcf5e-2a4e-435a-8387-4617cd52b194
        deviceAlias: &ref_138
          type: array
          minItems: 1
          description: A list of device aliases. Supports wildcards using '*'
          example:
            - Living*
            - Bad*
          items:
            type: string
            description: The device alias
    DeviceTypeFilterBody: &ref_200
      type: object
      additionalProperties: false
      properties:
        deviceTypeName: *ref_63
        deviceTypeCategory: *ref_64
        deviceTypeId: *ref_65
    DeviceState: &ref_232
      type: object
      description: The device's state.
      additionalProperties: false
      properties:
        configuration: &ref_242
          description: Reported values from the device's configuration.
          type: object
          example:
            beaconSignal:
              interval: 50
              power: 4
        attributes: &ref_243
          type: object
          description: Reported values from the device's attributes.
          example:
            batteryLevel: 0.94
            sensors:
              brightness: '5000,'
              movement: true
        lastSeen: &ref_244
          type: string
          format: date-time
          description: The time (RFC3339) the device was seen last by the cloud.
        status: &ref_245
          type: string
          enum:
            - ONLINE
            - OFFLINE
            - NOT MONITORED
          description: >-
            The status of the device based on the time it was last seen and the
            specified communication interval.
    DeviceEventIngest: &ref_252
      type: object
      description: An event from a device identified either by UUID or alias.
      oneOf:
        - &ref_66
          type: object
          title: Device Event
          description: A event from a device.
          required:
            - id
            - type
            - deviceId
          additionalProperties: false
          properties:
            id:
              description: The uuid to identify this event.
              type: string
              format: uuid
              example: 550e8400-e29b-11d4-a716-446655441337
              readOnly: true
            type:
              type: string
              description: >-
                The type of the event is used for filtering. Alphanumeric, may
                contain underscores.
              example: overheated
              pattern: '^([a-zA-Z0-9_]+)$'
              maxLength: 255
            value:
              description: The reported event payload as an object.
              type: object
              example:
                temperature: 45
            createdAt:
              description: >-
                The date the event were created. If not included it will default
                to the system time at arrival.
              type: string
              format: date-time
              example: '2018-07-07T11:50:12+00:00'
            deviceId:
              description: The uuid of the device which emitted this event.
              type: string
              format: uuid
              example: 550e8400-e29b-11d4-a716-446655440000
              writeOnly: true
            senderId:
              description: The uuid of the device which transmitted this event.
              type: string
              format: uuid
              example: 550e8400-e29b-11d4-a716-446655440000
              writeOnly: true
        - &ref_67
          type: object
          title: Device Event with alias
          description: A event from a device identified by an alias.
          required:
            - id
            - type
            - alias
            - senderId
          additionalProperties: false
          properties:
            id:
              description: The uuid to identify this event.
              type: string
              format: uuid
              example: 550e8400-e29b-11d4-a716-446655441337
              readOnly: true
            type:
              type: string
              description: >-
                The type of the event is used for filtering. Alphanumeric, may
                contain underscores.
              example: overheated
              pattern: '^([a-zA-Z0-9_]+)$'
              maxLength: 255
            value:
              description: The reported event payload as an object.
              type: object
              example:
                temperature: 45
            createdAt:
              description: >-
                The date the event were created. If not included it will default
                to the system time at arrival.
              type: string
              format: date-time
              example: '2018-07-07T11:50:12+00:00'
            alias:
              description: The identifying alias of the device which emited this event.
              type: string
              example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334'
              writeOnly: true
              maxLength: 255
            senderId:
              description: The uuid of the device which transmitted this event.
              type: string
              format: uuid
              example: 550e8400-e29b-11d4-a716-446655440000
              writeOnly: true
      example:
        type: overheated
        deviceId: 550e8400-e29b-11d4-a716-446655440000
    DeviceEvent: *ref_66
    DeviceEventWithAlias: *ref_67
    CertVerificationRequestObj:
      type: object
      description: X.509 Certificate - DeviceId Combination to verify.
      required:
        - certificateString
      properties:
        certificateString:
          type: string
          description: The certificate chain to check.
          example: |
            -----BEGIN CERTIFICATE-----<...>-----END CERTIFICATE-----
      additionalProperties: false
    Certificate: &ref_258
      type: object
      description: X.509 Certificate used to connect things to the cloud.
      required:
        - id
        - cert
        - status
      properties:
        id:
          type: string
          format: uuid
          description: The UUID of the certificate
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        cert:
          description: The certificate
          type: string
          example: |
            -----BEGIN CERTIFICATE-----<...>-----END CERTIFICATE-----
        status:
          type: string
          description: The status of the certificate.
          default: valid
          enum:
            - valid
            - expired
            - revoked
            - inactive
      additionalProperties: false
    CertificateStatus: &ref_267
      type: object
      description: X.509 Certificate status object.
      properties:
        status:
          type: string
          description: The status of the certificate.
          default: valid
          enum:
            - valid
            - expired
            - revoked
            - inactive
      additionalProperties: false
    DiagnosticsEvent: &ref_269
      type: object
      description: Data part of the Device Diagnostics Message
      required:
        - deviceId
        - tenantId
        - message
        - time
      additionalProperties: false
      properties:
        deviceId:
          type: string
          format: uuid
          description: The UUID of the device
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        tenantId:
          type: string
          format: uuid
          description: The ID of the tenant
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
        message:
          type: string
          description: The diagnostic message
          example: This message payload cannot be validated. Missing 'clientId'.
        time:
          type: string
          format: date-time
          description: >-
            The time this diagnostic event was created within the corresponding
            service.
          example: '2017-07-21T17:32:28Z'
    Firmware: &ref_271
      type: object
      required:
        - id
        - name
        - blobAttached
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
          description: The UUID of the firmware
        name:
          type: string
          description: The name of the firmware
          maxLength: 255
          minLength: 1
        description:
          type: string
          description: Additional description text
          maxLength: 255
        version:
          type: string
          description: Version string of the firmware
          maxLength: 255
        size:
          type: integer
          description: >-
            The size of the attached blob data. This property is only set when
            blob data is attached to the firmware.
        blobAttached:
          type: boolean
          description: >-
            Indicates wether blob data is attached to the firmware or not. It's
            set to true when a blob is attached. Otherwise, false.
        downloadUrl:
          type: string
          description: >-
            The download link for the attached blob. If no blob is attached, no
            download link is provided.
        hashes:
          type: array
          description: >-
            This array contains the hashes for the attached blob. Currently,
            only one hash algorithms is supported. In the future it's possible
            to use different hash algorithms.
            [multihash](https://github.com/multiformats/multihash) is used as
            the format for the hashes. This property is not set when no blob
            exist.
          items:
            type: string
        createdAt:
          type: string
          format: date-time
          description: The date when the firmware was created
        updatedAt:
          type: string
          format: date-time
          description: The date when the firmware was updated for the last time
    Blob: &ref_280
      type: string
      format: binary
      description: Binary data
    FirmwareInstallationRequest: &ref_284
      type: object
      description: >-
        Initial parameters of firmware installation into the slot for the
        specific device
      required:
        - firmwareId
        - slot
      additionalProperties: false
      properties:
        firmwareId:
          type: string
          format: uuid
          description: The UUID of the firmware.
        slot:
          type: string
          pattern: '^([a-zA-Z0-9_]+)$'
          maxLength: 255
          description: The name of the slot for firmware installation.
    FirmwareInstallation: &ref_285
      type: object
      description: >-
        Meta-data object which describes firmware installation status into the
        slot for the specific device
      required:
        - id
        - deviceId
        - firmwareId
        - slot
        - requestedAt
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
          description: The UUID of the firmware installation
        deviceId:
          type: string
          format: uuid
          description: The UUID of the device
        firmwareId:
          type: string
          format: uuid
          description: The UUID of the firmware
        slot:
          type: string
          pattern: '^([a-zA-Z0-9_]+)$'
          maxLength: 255
          description: The name of the slot for firmware installation
        requestedAt:
          type: string
          format: date-time
          description: >-
            The date when the firmware installation for the device was requested
            on cloud-side, but not received on device-side
        startedAt:
          type: string
          format: date-time
          description: The date when the firmware installation was started on device-side
        completedAt:
          type: string
          format: date-time
          description: >-
            The date when the firmware installation was successfully completed
            on device-side
        rejectedAt:
          type: string
          format: date-time
          description: >-
            The date when the firmware installation was rejected on device-side,
            due to some error
        rejectReason:
          type: string
          maxLength: 255
          description: The description of firmware installation rejection
    FirmwareInstallationUpdate: &ref_289
      type: object
      description: >-
        Editable metadata of firmware installation status into the slot for the
        specific device
      oneOf:
        - required:
            - startedAt
        - required:
            - completedAt
        - required:
            - rejectedAt
      additionalProperties: false
      properties:
        startedAt:
          type: string
          format: date-time
          description: The date when the firmware installation was started on device-side
        completedAt:
          type: string
          format: date-time
          description: >-
            The date when the firmware installation was successfully completed
            on device-side
        rejectedAt:
          type: string
          format: date-time
          description: >-
            The date when the firmware installation was rejected on device-side,
            due to some error
        rejectReason:
          type: string
          maxLength: 255
          description: The description of firmware installation rejection
    InternalError: &ref_275
      allOf:
        - &ref_68
          type: object
          required:
            - errorMessage
          additionalProperties: false
          properties:
            errorMessage:
              type: string
              description: Error message with further details.
        - type: object
          required:
            - errorCode
          additionalProperties: false
          properties:
            errorCode:
              type: string
              default: FIRMWARE_INTERNAL_ERROR
              description: >-
                Error code which can be used to get more information about the
                error
              enum:
                - FIRMWARE_INTERNAL_ERROR
    ForbiddenOrNotFoundError: &ref_274
      allOf:
        - *ref_68
        - type: object
          required:
            - errorCode
          additionalProperties: false
          properties:
            errorCode:
              type: string
              default: FIRMWARE_NO_ACCESS_TO_RESOURCE
              description: >-
                Error code which can be used to get more information about the
                error
              enum:
                - FIRMWARE_NO_ACCESS_TO_RESOURCE
    UnauthorizedError: &ref_273
      allOf:
        - *ref_68
        - type: object
          required:
            - errorCode
          additionalProperties: false
          properties:
            errorCode:
              type: string
              default: FIRMWARE_UNAUTHORIZED
              description: >-
                Error code which can be used to get more information about the
                error
              enum:
                - FIRMWARE_UNAUTHORIZED
    BadRequestError: &ref_272
      allOf:
        - *ref_68
        - type: object
          required:
            - errorCode
          additionalProperties: false
          properties:
            errorCode:
              type: string
              default: FIRMWARE_VALIDATION
              description: >-
                Error code which can be used to get more information about the
                error
              enum:
                - FIRMWARE_VALIDATION
    BlobExistsError: &ref_145
      allOf:
        - *ref_68
        - type: object
          required:
            - errorCode
          additionalProperties: false
          properties:
            errorCode:
              type: string
              default: FIRMWARE_BLOB_EXISTS
              description: >-
                Error code which can be used to get more information about the
                error
              enum:
                - FIRMWARE_BLOB_EXISTS
    MetaDataNextCursor:
      type: object
      description: common meta data with cursor for the payload.
      additionalProperties: false
      required:
        - cursor
      properties:
        cursors:
          type: object
          description: The id of the cursors to use.
          properties:
            next:
              type: integer
              format: int64
    MetaData: &ref_298
      type: object
      description: common meta data for the payload
    TimeseriesInsightDataPoint: &ref_292
      type: object
      description: >-
        Data point of the aggregated timeseries. Include time and a value which
        can be null.
      additionalProperties: false
      required:
        - time
        - value
      properties:
        time:
          description: >-
            The timestamp of the begin of the timeframe the value is related to.
            As RFC 3339 in UTC.
          type: string
          format: date-time
          example: '2015-08-04T19:05:14.000Z'
        value:
          type: number
          example: 3
          description: The value of the timeframe. The value can be 'null' aswell
    TimeseriesDataPoint: &ref_128
      type: object
      description: Data point of the requested timeseries.
      required:
        - value
      properties:
        value:
          anyOf:
            - type: number
            - type: integer
            - type: string
            - type: boolean
            - type: object
          description: The reported Value.
          example: 30
        time:
          type: string
          format: date-time
          description: >
            See RFC 3339 as UTC with nanoseconds. Defaults to current timestamp
            if not provided.
          example: '2015-08-04T19:05:14.318570484Z'
    TimeseriesDump: &ref_304
      type: object
      additionalProperties: false
      required:
        - path
      properties:
        path:
          type: string
          description: >-
            Path matching to a path defined in the reporting rules of the
            device's type. (e.g. `$.attributes.brightness`).
          example: $.attributes.sensor.brightness
        startTime:
          type: string
          format: date-time
          description: The dump contains data starting with the start time (RFC 3339)
          example: '2018-07-12T12:18:11.859Z'
        endTime:
          type: string
          format: date-time
          description: The dump contains data starting till to the end time (RFC 3339)
          example: '2018-07-12T12:18:11.859Z'
    TimeseriesDataResponse: &ref_305
      type: object
      additionalProperties: false
      properties:
        url:
          type: string
          description: >-
            This the download url where the generated dump can be downloaded
            once it is available
          example: >-
            https://api.lightelligence.io/v1/devices/4099046c-8d72-4046-8c7a-c2d2d18cb8f8/timeseries-dump/351ff402-2a9b-4d22-9066-97c976c50298
    DeviceFilter: &ref_121
      description: >-
        Criteria for filtering data by device. If multiple filters of different
        types (for example, tags and aliases) are provided, the devices must
        match each of them. You need to provide at least one device filter.
      type: object
      minProperties: 1
      additionalProperties: false
      properties:
        deviceId:
          type: array
          description: A list of device Ids you want to execute rules for
          minItems: 1
          example:
            - eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            - be838a54-5f85-4154-b8a6-81fa4cb29561
          items:
            type: string
            format: uuid
            description: The devices uuid
            example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
        deviceTag:
          type: array
          description: A list of device tags you want to execute rules for
          minItems: 1
          example:
            - tag1
            - tag2
          items:
            type: string
            description: The devices tag
            example: tag1
            maxLength: 255
            pattern: '^([a-zA-Z0-9_-]+)$'
        deviceTypeId:
          type: array
          description: A list of device type Ids you want to execute rules for
          minItems: 1
          example:
            - e41bcf5e-2a4e-435a-8387-4617cd52b194
            - f86579db-f403-4ce1-b782-f1978733ef9b
          items:
            type: string
            format: uuid
            description: The device type uuid
            example: e41bcf5e-2a4e-435a-8387-4617cd52b194
        deviceTypeCategory:
          type: array
          description: A list of device type categories you want to execute rules for
          minItems: 1
          example:
            - 'urn:example:test2:category'
            - 'urn:example:test:category'
          items:
            type: string
            format: uri
            description: The device type category
            example: 'urn:example:test:category'
        deviceConnectedBy:
          type: array
          description: >-
            A list of device who are connecting through one of the provided
            devices you want to execute rules for
          minItems: 1
          example:
            - eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            - be838a54-5f85-4154-b8a6-81fa4cb29561
          items:
            type: string
            format: uuid
            description: The device uuid
            example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
        deviceName:
          type: array
          minItems: 1
          example:
            - Living*
          items:
            type: string
            description: >-
              A device having the provided name case insensitively matched.
              Supports wildcards using '*' you want to execute rules for
            maxLength: 255
        deviceAlias:
          type: array
          minItems: 1
          example:
            - LivingRoom
            - Hallway
          items:
            type: string
            description: A device which has provided alias you want to execute rules for
            maxLength: 255
    BulkTimeseriesDump: &ref_307
      type: object
      required:
        - deviceFilter
        - dataFilter
      additionalProperties: false
      properties:
        dataFilter:
          type: object
          required:
            - paths
          additionalProperties: false
          properties:
            paths:
              type: array
              minItems: 1
              items:
                type: string
                description: >-
                  JSON Path for the attribute or configuration key the data is
                  from
                example: $.configuration.brightness
                pattern: ^(\$\.configuration\.|\$\.attributes\.)
            startTime:
              type: string
              format: date-time
              description: RFC 3339
            endTime:
              type: string
              format: date-time
              description: RFC 3339
        deviceFilter: &ref_69
          description: >-
            Criteria for filtering data by device. If multiple filters of
            different types (for example, tags and aliases) are provided, the
            devices must match each of them. You need to provide at least one
            device filter.
          type: object
          minProperties: 1
          additionalProperties: false
          properties:
            deviceId:
              type: array
              description: A list of device Ids you want to execute rules for
              minItems: 1
              example:
                - eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
                - be838a54-5f85-4154-b8a6-81fa4cb29561
              items:
                type: string
                format: uuid
                description: The devices uuid
                example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            deviceTag:
              type: array
              description: A list of device tags you want to execute rules for
              minItems: 1
              example:
                - tag1
                - tag2
              items:
                type: string
                description: The devices tag
                example: tag1
                maxLength: 255
                pattern: '^([a-zA-Z0-9_-]+)$'
            deviceTypeId:
              type: array
              description: A list of device type Ids you want to execute rules for
              minItems: 1
              example:
                - e41bcf5e-2a4e-435a-8387-4617cd52b194
                - f86579db-f403-4ce1-b782-f1978733ef9b
              items:
                type: string
                format: uuid
                description: The device type uuid
                example: e41bcf5e-2a4e-435a-8387-4617cd52b194
            deviceTypeCategory:
              type: array
              description: A list of device type categories you want to execute rules for
              minItems: 1
              example:
                - 'urn:example:test2:category'
                - 'urn:example:test:category'
              items:
                type: string
                format: uri
                description: The device type category
                example: 'urn:example:test:category'
            deviceConnectedBy:
              type: array
              description: >-
                A list of device who are connecting through one of the provided
                devices you want to execute rules for
              minItems: 1
              example:
                - eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
                - be838a54-5f85-4154-b8a6-81fa4cb29561
              items:
                type: string
                format: uuid
                description: The device uuid
                example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            deviceName:
              type: array
              minItems: 1
              example:
                - Living*
              items:
                type: string
                description: >-
                  A device having the provided name case insensitively matched.
                  Supports wildcards using '*' you want to execute rules for
                maxLength: 255
            deviceAlias:
              type: array
              minItems: 1
              example:
                - LivingRoom
                - Hallway
              items:
                type: string
                description: >-
                  A device which has provided alias you want to execute rules
                  for
                maxLength: 255
    BulkAggregatedRequest: &ref_316
      type: object
      description: Filter for bulk aggregated timeseries data points
      additionalProperties: false
      required:
        - dataFilter
        - deviceFilter
        - params
      properties:
        dataFilter:
          type: object
          additionalProperties: false
          required:
            - paths
          properties:
            startTime:
              type: string
              format: date-time
              description: >
                The start time of the time frame to request. (RFC 3339) If
                omitted, it will aggregate all data since the beginning of the
                recording period.
              example: '2015-08-01T00:05:14.318570484Z'
            endTime:
              type: string
              format: date-time
              description: >
                The end time of the time frame to request. (RFC 3339) If
                omitted, it will aggregate all data up until the end of the
                recording period.
              example: '2015-08-08T23:05:14.318570484Z'
            paths:
              type: array
              minItems: 1
              items:
                type: string
                description: >
                  JSON Path for the attribute or configuration key the data is
                  from. Should contain numerical values only.
                example: $.attributes.brightness
                pattern: ^(\$\.configuration\.|\$\.attributes\.)
        params:
          type: object
          additionalProperties: false
          required:
            - aggregation
          properties:
            aggregation:
              type: string
              example: max
              description: >-
                How should the values be aggregated. Supported values: min, max,
                mean, sum, count, diff, first, last.
              enum:
                - min
                - max
                - mean
                - sum
                - count
                - diff
                - first
                - last
            frameSize:
              type: string
              description: >
                The time frame size in which the values should be aggregated. By
                default, no frameSize is set and the data is not grouped by
                time. This means that the response contains exactly one result
                per device and path.
              enum:
                - 1m
                - 5m
                - 15m
                - 30m
                - 1h
                - 1d
        deviceFilter: *ref_69
    BulkAggregatedTimeseries: &ref_317
      description: Data points of the aggregated timeseries for a device and path.
      type: object
      additionalProperties: false
      required:
        - deviceId
        - path
        - datapoints
      properties:
        deviceId:
          type: string
          format: uuid
          description: ID of the device the data is from
          example: 9e9806a8-8d75-44b1-9a73-51a096945982
        path:
          type: string
          description: JSON Path for the attribute or configuration key the data is from
          example: $.configuration.brightness
          pattern: ^(\$\.configuration\.|\$\.attributes\.)
        datapoints:
          description: >
            Datapoints of the requested aggregated timeseries data. If frameSize
            is omitted, this will only contain one element.
          type: array
          items: &ref_70
            type: object
            additionalProperties: false
            required:
              - time
              - value
            properties:
              value:
                oneOf:
                  - type: number
                  - type: integer
                description: The reported Value.
                example: 30
              time:
                type: string
                format: date-time
                description: See RFC 3339 as UTC with nanoseconds.
                example: '2015-08-04T19:05:14.318570484Z'
    AggregatedTimeseriesPoint: *ref_70
    BulkTimeseriesData: &ref_311
      type: object
      additionalProperties: false
      required:
        - deviceId
        - path
        - datapoints
      properties:
        deviceId:
          type: string
          format: uuid
          description: ID of the device the data is from
          example: 9e9806a8-8d75-44b1-9a73-51a096945982
        path:
          type: string
          description: JSON Path for the attribute or configuration key the data is from
          example: $.configuration.brightness
          pattern: ^(\$\.configuration\.|\$\.attributes\.)
        datapoints:
          type: array
          items:
            type: object
            description: Datapoint of the requested timeseries data.
            additionalProperties: false
            required:
              - time
              - value
            properties:
              value:
                oneOf:
                  - type: string
                  - type: number
                  - type: integer
                  - type: boolean
                description: The reported Value.
                example: 30
              time:
                type: string
                format: date-time
                description: See RFC 3339 as UTC with nanoseconds.
                example: '2015-08-04T19:05:14.318570484Z'
    BulkTimeseriesDataResponse: &ref_308
      type: object
      additionalProperties: false
      required:
        - url
      properties:
        url:
          type: string
          format: url
          description: >-
            This the download url where the generated dump can be downloaded
            once it is available
          example: >-
            https://api.lightelligence.io/v1/devices/timeseries-dump/07aba39a-ccb3-426f-838e-6d9a9ae330f4
    ErrorCode: &ref_141
      type: string
      description: Error codes
      enum:
        - UNAUTHORIZED
        - FORBIDDEN
        - RESOURCE_NOT_FOUND
        - CONFLICT
        - VALIDATION
        - UNKNOWN
    IngestDataDevice: &ref_318
      type: object
      description: A message from a device identified either by UUID or alias.
      oneOf:
        - &ref_71
          type: object
          description: A data message from a device.
          additionalProperties: false
          required:
            - senderId
            - deviceId
            - type
            - value
          properties:
            senderId:
              type: string
              format: uuid
              description: >-
                The UUID of the device that sends the data. If the device is
                sending it by itself, senderId equals deviceId; if the data for
                the device is sent to the cloud by a gateway, then the senderId
                is the id of the gateway;
              example: 123e4567-e89b-12d3-a456-426655440000
              writeOnly: true
            deviceId:
              type: string
              format: uuid
              description: >-
                The devices UUID the reported value belongs to. (This means,
                that this device Id maybe not matches the deviceId of the
                sending device).
              example: 123e4567-e89b-12d3-a456-426655440000
            type:
              type: string
              enum:
                - attributes
                - configuration
              example: attributes
              description: >-
                Defines the type of the value object you report in the value
                property, to be able to decide if the reported value belongs to
                the configuration or the attributes of a device.
            value:
              description: The reported Value as object.
              type: object
              example:
                temperature: 35.7
                humidity: 42
            time:
              type: string
              format: date-time
              description: >-
                See RFC 3339. If no time is provided, the time the message
                arrived at the endpoint is used.
              example: '2015-08-04T19:05:14.318570484Z'
        - &ref_72
          type: object
          description: A data message from a device identified by an alias.
          additionalProperties: false
          required:
            - senderId
            - alias
            - type
            - value
          properties:
            senderId:
              type: string
              format: uuid
              description: The UUID of the sender of the data.
              example: 123e4567-e89b-12d3-a456-426655440000
            alias:
              type: string
              description: The identifying alias of the device which emited this event.
              example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334'
              writeOnly: true
              maxLength: 255
            type:
              type: string
              enum:
                - attributes
                - configuration
              example: attributes
              description: >-
                Defines the type of the value object you report in the value
                property, to be able to decide if the reported value belongs to
                the configuration or the attributes of a device.
            value:
              description: The reported Value as object.
              type: object
              example:
                temperature: 35.7
                humidity: 42
            time:
              type: string
              format: date-time
              description: >-
                See RFC 3339. If no time is provided, the time the message
                arrived at the endpoint is used.
              example: '2015-08-04T19:05:14.318570484Z'
      example:
        senderId: 123e4567-e89b-12d3-a456-426655440000
        deviceId: 123e4567-e89b-12d3-a456-426655440001
        type: attributes
        value:
          temperature: 35.7
          humidity: 42
        time: '2015-08-04T19:05:14.318570484Z'
    DeviceData: *ref_71
    DeviceDataWithAlias: *ref_72
    StreamingConnectionRequest: &ref_320
      type: object
      description: Request data to establish a WebSocket connection
      required:
        - filter
      properties:
        type:
          type: string
          enum:
            - live
            - buffered
          description: >-
            Specify the type of streaming connection requested. Defaults to
            "live". Live connections instantly sends messages received to the
            WebSocket connection, whereas buffered connection starts buffering
            messages for tenant on first connection. If connection is lost,
            messages that are up to two days old can be replayed.
          example: buffered
        options:
          type: object
          description: >-
            Specify options for the streaming connection. Not necessary on first
            connection.
          required:
            - replayFromTimestamp
          properties:
            replayFromTimestamp:
              type: string
              format: date-time
              description: >-
                The timestamp from which messages should be replayed on
                reconnect. Maximum value is two days back in time.
              example: '2019-08-19T15:12:03.05Z'
        filter:
          type: object
          description: >-
            Filter which allows to receive updates for specific message types
            and devices; The five filter conditions ("type", "deviceId", "tag",
            "attributes" and "configurations") are treated as an AND, the values
            provided in the arrays are treated as an OR. So the websocket client
            will receive all messages that contains ONE of the mentioned message
            types AND originates from ONE of the mentioned device ids.
          required:
            - type
          properties:
            type:
              type: array
              description: A list of updated types you want to receive updates for
              minItems: 1
              example:
                - attributeUpdate
                - configurationUpdate
              items:
                type: string
                enum:
                  - attributeUpdate
                  - configurationUpdate
                  - eventUpdate
                example: eventUpdate
              uniqueItems: true
            deviceId: *ref_73
            deviceConnectedBy: *ref_73
            deviceTag: *ref_74
            deviceName: *ref_75
            deviceTypeName: *ref_76
            deviceTypeCategory: *ref_77
            deviceTypeId: *ref_78
            deviceAlias: *ref_79
            tag:
              type: array
              description: A list of device tags you want to receive updates for
              minItems: 1
              deprecated: true
              example:
                - tag1
                - tag2
              items:
                type: string
                description: The devices tag
                example: tag1
            path:
              type: object
              description: >
                Filter containing at least a list of attributes or configuration
                paths to use as filters.
              properties:
                attributes:
                  type: array
                  description: >-
                    A list of json paths of the attributes that you want to
                    receive updates for
                  minItems: 1
                  example:
                    - $.temperature
                    - $.color.red
                  items:
                    type: string
                    description: The json path of the attribute
                    example: $.temperature
                configurations:
                  type: array
                  description: >-
                    A list of json paths of the configurations that you want to
                    receive updates for
                  minItems: 1
                  example:
                    - $.hue
                    - $.brightness
                  items:
                    type: string
                    description: The json path of the configuration
                    example: $.brightness
            event:
              type: array
              description: A list of event types you want to receive updates for
              minItems: 1
              example:
                - maintenance
              items:
                type: string
                description: The event type
                example: maintenance
    StreamingConnectionResponse: &ref_321
      type: object
      description: >
        Response for a successful request for a WebSocket connection. The
        contained URL in the url

        property can be used to open a new WebSocket connection. The URL is only
        valid until validUntil.

        Once the URL is expired, a new WebSocket connection URL needs to be
        requested.
      required:
        - url
        - validUntil
      properties:
        url:
          type: string
          description: >
            The URL with a token that can be used to establish a new WebSocket
            connection of the streaming type specified in the request.

            Note that using uri on the format
            wss://api.lightelligence.io/v1/devices/streaming-connections/{token}/ws
            is deprecated since

            the introduction of buffered streaming connections.

            The end part of the uri must now contain the streaming type.
          example: >-
            wss://api.lightelligence.io/v1/devices/streaming-connections/bfaa8c93de8042da5cc28dffda6dd37c5767e5db6298ece078ddb74f6cdf8fbb/ws/live
        validUntil:
          type: string
          description: The date until the provided URL is valid
          format: date-time
          example: '2018-08-23T07:04:15.830Z'
    AttributeUpdate:
      type: object
      description: Attribute update message
      required:
        - type
        - payload
      properties:
        type:
          type: string
          description: The type of the message
          example: attributeUpdate
        payload:
          type: object
          required:
            - deviceId
            - time
            - value
          properties:
            deviceId:
              type: string
              format: uuid
              description: The devices UUID
              example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            time:
              type: string
              description: The time when the configuration update happened
              format: date-time
              example: '2018-08-23T07:04:15.830Z'
            value:
              type: object
              description: Object that contains the updated attribute
              example:
                light:
                  intensity: 27
                  color: red
    ConfigurationUpdate:
      description: Configuration update message
      required:
        - type
        - payload
      properties:
        type:
          type: string
          description: The type of the message
          example: configurationUpdate
        payload:
          type: object
          required:
            - deviceId
            - time
            - value
          properties:
            deviceId:
              type: string
              format: uuid
              description: The devices UUID
              example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            time:
              type: string
              description: The time when the configuration update happened
              format: date-time
              example: '2018-08-23T07:04:15.830Z'
            value:
              type: object
              description: Object that contains the updated configuration
              example:
                light:
                  intensity: 27
                  color: red
    EventUpdate:
      description: Event update message
      required:
        - type
        - payload
      properties:
        type:
          type: string
          description: The type of the message
          example: attributeUpdate
        payload:
          type: object
          required:
            - deviceId
            - time
            - value
          properties:
            deviceId:
              type: string
              format: uuid
              description: The devices UUID
              example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            type:
              type: string
              description: The type of the event
              example: maintenance
            time:
              type: string
              description: The time when the configuration update happened
              format: date-time
              example: '2018-08-23T07:04:15.830Z'
    DeveloperTenantId: &ref_100
      type: string
      description: The ID of the developer tenant
      format: uuid
      example: 570e0a66-974b-40dd-8108-844da77719e9
    AllowedTenantId: &ref_81
      type: string
      description: The ID of the allowed tenant
      format: uuid
      example: 570e0a66-974b-40dd-8108-844da77719e9
    InstalledTenantId: &ref_108
      type: string
      description: The ID of the installed tenant
      format: uuid
      example: 570e0a66-974b-40dd-8108-844da77719e9
    InstalledTenantName: &ref_114
      type: string
      description: >
        The name of the tenant installed. If the name couldn't be loaded
        correctly, the name might be an empty string.
      readOnly: true
      example: My Great Tenant
    AllowedTenantName: &ref_83
      readOnly: true
      type: string
      minLength: 3
      maxLength: 32
      description: >
        The tenant name. The `tenantName` property is only set if the allowed
        tenant installed the application.
      example: OSRAM
      pattern: '^([a-zA-Z0-9_\- ]+)$'
    ApplicationPermissionId: &ref_92
      type: string
      description: The ID of the permission
      format: uuid
      example: 570e0a66-974b-40dd-8108-844da77719e9
    ApplicationName: &ref_86
      type: string
      description: The name of the application
      minLength: 3
      maxLength: 32
      pattern: '^([a-zA-Z0-9_\- ]+)$'
      example: My Great Application
    ApplicationNameInternal: &ref_115
      type: string
      description: >
        The name of the application. Soft-deleted apps are postfixed with
        "--deleted-{random_string}"
      minLength: 3
      pattern: '^([a-zA-Z0-9_\- ]+)$'
      example: My Great Application
    ApplicationTeaserDescription: &ref_87
      type: string
      description: A short description for the application
      maxLength: 170
      example: This application is awesome because it just works!
    ApplicationUrl: &ref_88
      type: string
      format: url
      maxLength: 2000
      description: >
        A URL with more information on the app. E.g. the app homepage. **Note**:
        Protocol is required.
      example: 'https://my-awesome-app.example.com'
    OAuth2ClientId: &ref_93
      readOnly: true
      type: string
      description: The client ID of the application
      format: uuid
      example: 570e0a66-974b-40dd-8108-844da77719e9
    OAuth2ClientSecret: &ref_94
      type: string
      example: 7bCbrzgNo1LhO07E
      description: >
        The secret of the application. It can be used to authenticate against
        the OLT platform. To get a valid token, it needs to be provided with the
        client ID of the application.
    ApplicationWithPublicOAuth2Client: &ref_89
      type: boolean
      description: >
        The `withPublicOauth2Client` property indicates whether the application
        should also be accessible as a public OAuth2 client. Setting this
        property to `true` will add the `publicOauth2Client` property to the
        application. Setting this property to `false` will remove the previously
        created public client. Toggling this property from `true` to `false` to
        `true` will create a new `id` for the public client and thus make the
        first one unusable.
    ApplicationWhitelisted: &ref_117
      type: boolean
      description: >
        olt-internal & olt-external scoped clients is treated as internal
        applications to get full access to all tenants and should not care about
        the limited set of permissions
    ApplicationStatus: &ref_106
      type: string
      enum:
        - active
        - inactive
      description: >
        Status of the application. An `inactive` application cannot be
        installed, nor can the tenant data be accessed.
    ApplicationCreatedStatus: &ref_101
      type: string
      enum:
        - active
      description: >
        Status of the application. An `inactive` application cannot be
        installed, nor can the tenant data be accessed.
    ApplicationStatusInternal: &ref_116
      type: string
      enum:
        - active
        - inactive
        - deleted
      description: >
        Status of the application. An `inactive` or `deleted` application,
        cannot be installed, nor can the tenant data be accessed.
    ApplicationAvailableCode: &ref_112
      readOnly: true
      type: string
      enum:
        - APP_AVAILABLE
        - APP_INACTIVE
        - APP_DELETED
        - APP_DENIED
        - APP_UNKNOWN
      description: |
        These "codes" indicate why an application is not available.
    ApplicationAvailableForTenant: &ref_111
      readOnly: true
      type: boolean
      description: >
        The `available` property indicates whether the application is either
        available for installation or allowed to access the tenant data.
    RedirectUri: &ref_80
      type: string
      description: |
        Uri set to validate OAuth2 callback Urls
      example: 'https://my-domain.com/auth/callback'
    ApplicationRedirectUris: &ref_90
      type: array
      description: >
        List of redirect URIs. For security reasons, it's not allowed to use
        wildcards for any of the provided URIs.
      items: *ref_80
    AllowedTenantComment: &ref_82
      type: string
      description: >
        A comment about the allowed tenant. As there is no validation of the
        `tenantId` (if the tenant exists), this field can be used as a free text
        comment.
      example: 'This should be the tenant "ABC", contact is help@abc.com'
      minLength: 0
      maxLength: 255
    AllowedTenant: &ref_84
      type: object
      additionalProperties: false
      description: 'The tenant, that is allowed to access the application'
      required:
        - tenantId
      properties:
        tenantId: *ref_81
        comment: *ref_82
    AllowedTenantResponse: &ref_85
      type: object
      additionalProperties: false
      description: 'The tenant, that is allowed to access the application'
      required:
        - tenantId
        - installed
        - comment
        - createdAt
      properties:
        tenantId: *ref_81
        tenantName: *ref_83
        installed:
          readOnly: true
          type: boolean
          description: >
            The `installed` property indicates if the (allowed) tenant has
            installed the application. If this property is `true`, the
            `tenantName` will also be provided.
        comment: *ref_82
        createdAt:
          readOnly: true
          type: string
          description: |
            The date when the tenant was added to the list of allowed tenants
          format: date-time
    AllowedTenants: &ref_91
      type: array
      description: List of allowed tenants for the application
      items: *ref_84
    AllowedTenantsResponse: &ref_102
      type: array
      description: List of allowed tenants for the application
      items: *ref_85
    ApplicationCreatedAt: &ref_104
      readOnly: true
      type: string
      description: The date when the application was created
      format: date-time
    ApplicationUpdatedAt: &ref_105
      readOnly: true
      type: string
      description: The date when the application was changed
      format: date-time
    DeveloperApplicationPostPayload: &ref_326
      type: object
      additionalProperties: false
      description: Payload to create an application
      required:
        - name
      properties:
        name: *ref_86
        teaserDescription: *ref_87
        url: *ref_88
        withPublicOauth2Client: *ref_89
        redirectUris: *ref_90
        allowedTenants: *ref_91
        permissions: &ref_96
          type: object
          additionalProperties: false
          description: |
            Permissions for this application
          required:
            - client
            - user
          properties:
            client:
              type: array
              items:
                type: object
                additionalProperties: false
                description: Client permissions
                properties:
                  id: *ref_92
            user:
              type: array
              items:
                type: object
                additionalProperties: false
                description: User permissions
                properties:
                  id: *ref_92
    InstallationStatus: &ref_109
      type: string
      enum:
        - ok
        - outdated
    OAuth2ConfidentalClientType: &ref_95
      type: string
      description: The type of the OAuth2 client
      enum:
        - confidental
    OAuth2ClientWithSecret: &ref_98
      type: object
      additionalProperties: false
      description: >
        The applications default OAuth2 client config. This client should be
        used for occasions when a safe storage of the client secret __can__ be
        assured.
      required:
        - id
        - secret
        - type
      properties:
        id: *ref_93
        secret: *ref_94
        type: *ref_95
    OAuth2Client: &ref_107
      type: object
      additionalProperties: false
      description: >
        The applications default OAuth2 client config. This client should be
        used for occasions when a safe storage of the client secret __can__ be
        assured.
      required:
        - id
        - type
      properties:
        id: *ref_93
        type: *ref_95
    PublicOAuth2Client: &ref_99
      type: object
      additionalProperties: false
      description: >
        The applications public OAuth2 client config. This client should be used
        for occasions when a safe storage of the secret __cannot__ be assured.
        Usually this client is used for Single-Page-Applications that don't use
        a backend. The `publicOauth2Client` property of the application is only
        provided if the applications `withPublicOauth2Client` was set to `true`.
      required:
        - id
        - type
      properties:
        id: *ref_93
        type:
          type: string
          description: The type of the OAuth2 client
          enum:
            - public
    DeveloperApplicationInstallationsCount: &ref_103
      type: number
      readOnly: true
      description: The amount of installations for this application
    ApplicationPermissions: *ref_96
    DeveloperApplicationPostResponse: &ref_327
      type: object
      additionalProperties: false
      description: >
        The Application response for POST requests. This response will also
        include the application's OAuth2 client secret `oauth2Client.secret`.
        Also the applications' `status` is always `"active"` for newly created
        applications.
      required:
        - id
        - name
        - withPublicOauth2Client
        - oauth2Client
        - tenantId
        - status
        - installationsCount
        - createdAt
        - updatedAt
      properties:
        id: *ref_97
        name: *ref_86
        teaserDescription: *ref_87
        url: *ref_88
        withPublicOauth2Client: *ref_89
        oauth2Client: *ref_98
        publicOauth2Client: *ref_99
        tenantId: *ref_100
        status: *ref_101
        redirectUris: *ref_90
        allowedTenants: *ref_102
        installationsCount: *ref_103
        permissions: *ref_96
        createdAt: *ref_104
        updatedAt: *ref_105
    DeveloperApplicationPatchPayload: &ref_338
      type: object
      additionalProperties: false
      description: Payload to update the application
      properties:
        name: *ref_86
        teaserDescription: *ref_87
        url: *ref_88
        withPublicOauth2Client: *ref_89
        status: *ref_106
        redirectUris: *ref_90
        permissions: *ref_96
    DeveloperApplicationPatchResponse: &ref_339
      type: object
      additionalProperties: false
      description: >
        Response of updating the application. This response will, besides
        application `id` and `updatedAt`, only contain those properties, which
        were part of the update request. If the `withPublicOauth2Client` was set
        to `true` on the request, also the `publicOauth2Client` is part of the
        response.
      required:
        - id
        - updatedAt
      properties:
        id: *ref_97
        name: *ref_86
        teaserDescription: *ref_87
        url: *ref_88
        withPublicOauth2Client: *ref_89
        publicOauth2Client: *ref_99
        status: *ref_106
        redirectUris: *ref_90
        permissions: *ref_96
        updatedAt: *ref_105
    DeveloperApplicationResponse: &ref_330
      type: object
      additionalProperties: false
      description: Application representation on list responses
      required:
        - id
        - name
        - withPublicOauth2Client
        - oauth2Client
        - tenantId
        - status
        - installationsCount
        - createdAt
        - updatedAt
      properties:
        id: *ref_97
        name: *ref_86
        withPublicOauth2Client: *ref_89
        teaserDescription: *ref_87
        url: *ref_88
        oauth2Client: *ref_107
        publicOauth2Client: *ref_99
        tenantId: *ref_100
        status: *ref_106
        installationsCount: *ref_103
        createdAt: *ref_104
        updatedAt: *ref_105
    DeveloperApplicationDetailResponse: &ref_336
      type: object
      additionalProperties: false
      description: |
        Application representation on get responses with detailed information
      required:
        - id
        - name
        - withPublicOauth2Client
        - oauth2Client
        - tenantId
        - status
        - redirectUris
        - permissions
        - installationsCount
        - createdAt
        - updatedAt
      properties:
        id: *ref_97
        name: *ref_86
        teaserDescription: *ref_87
        url: *ref_88
        withPublicOauth2Client: *ref_89
        oauth2Client: *ref_107
        publicOauth2Client: *ref_99
        tenantId: *ref_100
        status: *ref_106
        redirectUris: *ref_90
        installationsCount: *ref_103
        permissions: *ref_96
        createdAt: *ref_104
        updatedAt: *ref_105
    BasicInstallationResponse: &ref_113
      type: object
      additionalProperties: false
      description: Installation details of the application on the tenant
      required:
        - tenantId
        - status
        - createdAt
      properties:
        tenantId: *ref_108
        status: *ref_109
        createdAt:
          type: string
          description: The date when the application was installed
          format: date-time
    InstallationPostPayload: &ref_347
      type: object
      additionalProperties: false
      description: Installation consent data
      required:
        - permissions
      properties:
        permissions: *ref_96
    InstallationPatchPayload: &ref_349
      type: object
      additionalProperties: false
      description: Installation consent data
      required:
        - permissions
      properties:
        permissions: *ref_96
    InstallationResponse: &ref_344
      type: object
      additionalProperties: false
      description: Installation details
      required:
        - applicationId
        - tenantId
        - status
        - permissions
        - createdAt
        - updatedAt
      properties:
        applicationId: *ref_97
        tenantId: *ref_110
        status: *ref_109
        permissions: *ref_96
        createdAt:
          type: string
          description: The date when the application was installed
          format: date-time
        updatedAt:
          type: string
          description: The date when the installation was updated
          format: date-time
    ApplicationResponse: &ref_346
      type: object
      additionalProperties: false
      description: >
        An installed or available application. If the `installation` object is
        provided, the application is installed for the tenant assigned.
      required:
        - id
        - name
        - available
        - availableCode
      properties:
        id: *ref_97
        name: *ref_86
        teaserDescription: *ref_87
        url: *ref_88
        available: *ref_111
        availableCode: *ref_112
        installation: *ref_113
    InstalledTenants: &ref_343
      description: >
        List of tenants that have installed the application. This list of
        tenants includes only tenants available/accessible for the application.
        The `name` of the tenant could potentially be an empty string if it
        couldn't be loaded correctly.
      type: array
      items:
        type: object
        additionalProperties: false
        required:
          - tenantId
          - name
        properties:
          tenantId: *ref_108
          name: *ref_114
    InternalDeveloperApplicationResponse:
      type: object
      additionalProperties: false
      description: Application representation on list responses
      required:
        - id
        - name
        - withPublicOauth2Client
        - oauth2Client
        - tenantId
        - status
        - installationsCount
        - createdAt
        - updatedAt
      properties:
        id: *ref_97
        name: *ref_115
        withPublicOauth2Client: *ref_89
        teaserDescription: *ref_87
        url: *ref_88
        oauth2Client: *ref_107
        publicOauth2Client: *ref_99
        tenantId: *ref_100
        status: *ref_116
        installationsCount: *ref_103
        createdAt: *ref_104
        updatedAt: *ref_105
    InternalApplicationWithInstalledTenants:
      type: object
      additionalProperties: false
      description: >
        Application data with installed tenants. If the application does not
        contain the `clientId`, it's a virtual (system) application.
      required:
        - status
        - installedTenants
        - whitelisted
      properties:
        id: *ref_97
        name: *ref_86
        status: *ref_116
        whitelisted: *ref_117
        installedTenants:
          description: List of tenants that installed the application.
          type: array
          items:
            type: object
            additionalProperties: false
            required:
              - tenantId
              - available
              - availableCode
              - installationStatus
            properties:
              tenantId: *ref_108
              available: *ref_111
              availableCode: *ref_112
              installationStatus: *ref_109
    InternalApplicationWithPermissions:
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - available
        - availableCode
        - installationStatus
        - whitelisted
        - permissions
      properties:
        id:
          type: string
          description: The ID of the application or the client id if client is whitelisted
        name: *ref_86
        available:
          type: boolean
        availableCode: *ref_112
        installationStatus: *ref_109
        whitelisted: *ref_117
        permissions: *ref_96
    AppError: &ref_328
      type: object
      additionalProperties: false
      required:
        - errorMessage
        - errorCode
      properties:
        errorMessage:
          type: string
          description: Error message with futher details.
        errorCode: &ref_118
          type: string
          description: These codes are specific to services
          enum:
            - APP_UNAUTHORIZED
            - APP_FORBIDDEN
            - APP_RESOURCE_NOT_FOUND
            - APP_CONFLICT
            - APP_VALIDATION
            - APP_UNKNOWN
            - INVALID_TOKEN
            - NO_ACCESS_TO_RESOURCE
    AppErrorCode: *ref_118
    BasicApplication:
      type: object
      description: A basic application
      additionalProperties: false
      required:
        - id
        - name
        - status
        - tenantId
        - createdAt
      properties:
        id: *ref_97
        name: *ref_86
        status: *ref_106
        tenantId: *ref_100
        createdAt: *ref_104
    PaymentSession:
      type: object
      additionalProperties: false
      required:
        - sdkVersion
        - shopperReference
        - origin
        - returnUrl
        - countryCode
      properties:
        sdkVersion:
          type: string
          description: Ayden SDK version used
          example: 1.9.2
        origin:
          type: string
          enum:
            - local
            - dev
            - int
            - preview
            - prod
          example: dev
        returnUrl:
          type: string
          description: Return URL relative to origin
          example: /checkout/completed
        countryCode:
          type: string
          description: The shopper country code according to ISO 3166-1 alpha-2
          example: NL
          minLength: 2
          maxLength: 3
        shopperReference:
          type: string
          format: uuid
          description: Shopper id used by the payment session
          example: 0f2f4b03-0426-4ffa-837b-751eff9a4d78
    PaymentPayload:
      type: object
      additionalProperties: false
      properties:
        paymentPayload:
          type: string
          description: Payload to be validated by the payment provider
          example: eyJ0ZXN0IjoiZXhhbXBsZSBvYmplY3Qgd2l0aG91dCByZWFsIGVzdHJ1Y3R1cmUifQ==
    NotificationError: &ref_149
      type: object
      description: Error response
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          type: string
          description: The error code.
          example: NOTIFICATIONS_BADREQUEST
        errorMessage:
          type: string
          description: Error message with futher details.
          example: Please check your query parameters.
    NotificationMetaDataPaging: &ref_350
      type: object
      description: Common meta data for the payload.
      required:
        - page
        - pageSize
        - pagesTotal
      properties:
        page:
          type: integer
          description: The actual returned number of the page.
        pageSize:
          type: integer
          description: The used page size.
        itemsTotal:
          type: integer
          description: The total number of items.
        pagesTotal:
          type: integer
          description: The total number of pages given current page size.
    NotificationId: &ref_120
      type: string
      format: uuid
      description: Notification Id
      example: 09dc8207-43b8-40b8-a40f-c160bdf4d638
    Notification: &ref_351
      type: object
      description: Notification
      additionalProperties: false
      minProperties: 2
      required:
        - notificationTemplate
        - notificationFilter
      properties:
        notificationTemplate: &ref_119
          type: object
          description: Notification template
          additionalProperties: false
          minProperties: 1
          required:
            - notificationRecipient
            - notificationPayload
          properties:
            notificationRecipient:
              type: string
              description: >-
                A recipient of the notification, i.e. e-mail address. It is
                possible to specify multiple recipients up to 100 recipients as
                a comma separated list
              example: alert@email.me
            notificationTopic:
              type: string
              description: 'A topic of the notification, i.e. e-mail subject'
              example: Please check motion sensor
            notificationPayload:
              type: string
              description: 'A notification payload, i.e. e-mail body'
              example: Motion sensor needs maintenance
            debounceDuration:
              type: number
              description: >-
                Number of minutes between sent out notifications of the same
                template. Debounced notifications will still be registered in
                the notification history.
              minimum: 2
              maximum: 2147483647
              example: 4
        notificationFilter:
          type: object
          minProperties: 1
          description: >-
            Filter which allows to receive notifications for specific events;
            The filter conditions ("deviceEvent", "deviceId", "deviceTag", etc)
            are treated as an AND, the values provided in the arrays are treated
            as an OR.
          required:
            - eventFilter
          properties:
            eventFilter:
              type: object
              minProperties: 1
              required:
                - deviceEvent
              properties:
                deviceEvent:
                  type: array
                  description: A list of event types you want to receive notifications for
                  minItems: 1
                  example:
                    - maintenance
                  items:
                    type: string
                    description: The event type
                    example: maintenance
                ruleId:
                  type: string
                  format: uuid
                  description: >-
                    An optional rule id, if given - notification will be
                    triggered only for events with this ruleId
                  example: 3064e3d7-79ba-4003-b9db-f03b43deecdd
            deviceFilter:
              type: object
              description: >-
                Criteria for filtering data by device. If multiple filters of
                different types (for example, tags and aliases) are provided,
                the devices must match each of them
              minProperties: 1
              properties:
                deviceId:
                  type: array
                  description: A list of device Ids you want to receive notifications for
                  minItems: 1
                  example:
                    - eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
                    - be838a54-5f85-4154-b8a6-81fa4cb29561
                  items:
                    type: string
                    format: uuid
                    description: The devices uuid
                    example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
                deviceTag:
                  type: array
                  description: A list of device tags you want to receive notifications for
                  minItems: 1
                  example:
                    - tag1
                    - tag2
                  items:
                    type: string
                    description: The devices tag
                    example: tag1
                deviceTypeId:
                  type: array
                  description: >-
                    A list of device type Ids you want to receive notifications
                    for
                  minItems: 1
                  example:
                    - e41bcf5e-2a4e-435a-8387-4617cd52b194
                    - f86579db-f403-4ce1-b782-f1978733ef9b
                  items:
                    type: string
                    format: uuid
                    description: The device type uuid
                    example: e41bcf5e-2a4e-435a-8387-4617cd52b194
                deviceTypeCategory:
                  type: array
                  description: >-
                    A list of device type categories you want to receive
                    notifications for
                  minItems: 1
                  example:
                    - category1
                    - category2
                  items:
                    type: string
                    format: urn
                    description: The device type category
                    example: category1
                deviceConnectedBy:
                  type: array
                  description: >-
                    A list of device who are connecting through one of the
                    provided devices you want to receive notifications for
                  minItems: 1
                  example:
                    - eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
                    - be838a54-5f85-4154-b8a6-81fa4cb29561
                  items:
                    type: string
                    format: uuid
                    description: The device type uuid
                    example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
                deviceName:
                  type: array
                  minItems: 1
                  example:
                    - Living*
                  items:
                    type: string
                    description: >-
                      A device having the provided name case insensitively
                      matched. Supports wildcards using '*' you want to receive
                      notifications for
                deviceAlias:
                  type: array
                  minItems: 1
                  example:
                    - LivingRoom
                    - Hallway
                  items:
                    type: string
                    description: >-
                      A device which has provided alias you want to receive
                      notifications for
    NotificationTemplate: *ref_119
    NotificationHistoryId: &ref_139
      type: string
      format: uuid
      description: Notification history Id
      example: 88ba20dc-4b64-486b-8f48-e54908ee87be
    NotificationHistory: &ref_360
      type: object
      description: Notification history
      additionalProperties: false
      required:
        - notificationId
        - timestamp
        - notificationTrigger
      properties:
        notificationId: *ref_120
        timestamp:
          type: string
          format: date-time
        notificationTrigger:
          type: object
          additionalProperties: false
          required:
            - id
            - type
            - createdAt
            - tenantId
            - deviceId
          properties:
            id:
              type: string
              format: uuid
              description: The event id
              example: 2e31a4a9-3b9b-43a5-90e6-57ee9a2fc3bd
            type:
              type: string
              description: The message type
              example: attributes
            createdAt:
              type: string
              format: date-time
              description: RFC-3339 timestamp
            tenantId:
              type: string
              format: uuid
              description: The tenant id
              example: ccb5c1f2-2b84-4443-ba86-aac459588202
            deviceId:
              type: string
              format: uuid
              description: The device id
              example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
            value:
              type: object
              description: Optional event payload
    RuleBasic: &ref_122
      type: object
      description: >
        A rule for a list of `paths`, filtered by a `deviceFilter`, that will be
        aggregated and compared against a predefined `constant`. If the
        `constant` threshold is met during a provided `duration`, an `event`
        will be triggered, but no more than once every `triggerInterval`
        seconds. Rules are `active` by default, otherwise they won't be
        processed or trigger events.
      additionalProperties: false
      properties:
        name:
          type: string
          description: The name of the rule
          example: My awesome rule
        paths:
          type: array
          minItems: 1
          items:
            type: string
            description: >
              JSON Path for the attribute or configuration key the data is from.
              Should contain scalar values only.
            example: $.configuration.brightness
            pattern: ^(\$\.configuration\.|\$\.attributes\.)
        aggregation:
          description: >
            Aggregation algorithm to be used for the gathered data within the
            specified `duration` per device and path. If it is specified,
            `duration` also has to be set. If `constant` is of non-numeric type,
            `aggregation` and `duration` are not supported.
          type: string
          enum:
            - min
            - max
            - mean
            - sum
            - count
            - diff
            - first
            - last
          nullable: true
        comparator:
          description: >
            The comparator to be used when comparing aggregated, reported data
            points with the specified `constant` If constant is of non-numeric
            type, only `eq` and `neq` are supported.
          type: string
          enum:
            - gt
            - gte
            - lt
            - lte
            - eq
            - neq
        constant:
          description: >
            The value to which the aggregate is compared to, using the
            comparator. If the value is non-numeric, only `eq` and `neq`
            comparators are supported.
          anyOf:
            - type: boolean
              example: true
            - type: number
              example: 36.6
            - type: string
              example: critical
        active:
          description: >-
            Whether a rule should be executed and trigger events. `true` by
            default.
          type: boolean
          default: true
        duration:
          description: >
            Aggregation period in seconds. If it is specified, `aggregation`
            also has to be set. If `constant` is of non-numeric type,
            `aggregation` and `duration` are not supported.
          type: number
          minimum: 60
          maximum: 86400
          example: 3600
          nullable: true
        triggerInterval:
          description: >-
            Minimum time between triggered events (per device and path) in
            seconds.
          type: number
          minimum: 1
          maximum: 86400
          example: 10
        triggerRepeating:
          description: >
            Whether a rule can trigger more than once without leaving the
            trigger condition. `true` by default.
          type: boolean
          default: true
        event:
          description: >
            Name of the event triggered by the rule engine, if the event is not
            supported by the type of the matching device, the resulting event
            will be dropped. The event will be sent with an empty payload, so
            the device type event schema should not require or define any
            properties.
          type: string
          maxLength: 255
          example: alert
          pattern: '^([a-zA-Z0-9_]+)$'
        exitEvent:
          description: >
            Name of the event triggered by the rule engine when the rule is
            leaving the trigger condition. If the event is not supported by the
            type of the matching device, the resulting event will be dropped.
          type: string
          maxLength: 255
          example: normalized
          pattern: '^([a-zA-Z0-9_]+)$'
        deviceFilter: *ref_121
    RuleCreate: &ref_361
      title: Rule creation object
      allOf:
        - *ref_122
        - type: object
          required:
            - name
            - deviceFilter
            - paths
            - comparator
            - constant
            - triggerInterval
            - event
    RuleRead: &ref_362
      title: Rule read object
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - active
        - name
        - deviceFilter
        - paths
        - comparator
        - constant
        - triggerInterval
        - triggerRepeating
        - event
      additionalProperties: false
      properties:
        id:
          description: The automatically assigned UUID for this rule
          type: string
          format: uuid
          example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: The date when the rule was created
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: The date when the rule was updated for the last time
          readOnly: true
    RuleUpdate: &ref_372
      title: Rule update object
      allOf:
        - *ref_122
    RuleExecution: &ref_377
      title: Rule Execution
      type: object
      additionalProperties: false
      required:
        - deviceId
        - path
        - value
        - event
      properties:
        deviceId:
          description: The device UUID.
          type: string
          format: uuid
          example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
        path:
          type: string
          pattern: ^(\$\.configuration\.|\$\.attributes\.)
          description: JSON Path for the attribute or configuration.
          example: $.configuration.brightness
        event:
          description: Name of the (exit) event that the rule is executed with.
          type: string
          maxLength: 255
          example: alert
          pattern: '^([a-zA-Z0-9_]+)$'
        value:
          description: The (aggregated) scalar value that the rule is executed with.
          anyOf:
            - type: number
              example: 36.6
            - type: string
              example: critical
            - type: boolean
              example: true
        lastExecutedAt:
          type: string
          format: date-time
          description: The date when the rule was executed
          example: '2019-07-09T12:21:37.694Z'
    AuditLog: &ref_123
      type: object
      additionalProperties: false
      description: One Audit Log item
      required:
        - id
        - producer
        - producerVersion
        - userId
        - clientId
        - actionTimestamp
        - logTimestamp
        - auditMessage
        - action
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: The id of the action
          example: aa6deb4b-426c-424e-8bef-7d3b4f636f84
        producer:
          type: string
          description: The service sending this message
          example: id_service
        producerVersion:
          type: string
          description: The service version (e.g. commit hash)
          example: ad925da56
        userId:
          type: string
          format: uuid
          description: The id of the user who initiated this action
          example: aa6deb4b-426c-424e-8bef-7d3b4f636f84
        userEmail:
          type: string
          format: email
          description: The e-mail of the user
          example: foo@bar.com
        clientId:
          type: string
          description: The id of the oauth client used when triggering the action
          example: olt-portal
        tenantId:
          type: string
          format: uuid
          description: The id of the tenant for which this action was triggered
          example: aa6deb4b-426c-424e-8bef-7d3b4f636f84
        action:
          type: string
          description: The name of the action
          example: tenant.created
        actionTimestamp:
          type: string
          format: date-time
          description: The time when the action was issued at the original service
          example: '2019-01-01T10:00:00+00:00'
        logTimestamp:
          type: string
          format: date-time
          description: The time when the action was send to the audit log service
          example: '2019-01-01T10:00:00+00:00'
        auditMessage:
          type: string
          description: The human readable message of what the action was
          example: >
            The User foo@bar.com (ID aa6deb4b-426c-424e-8bef-7d3b4f636f84)
            created the Tenant Test-Tenant (ID
            aa6deb4b-426c-424e-8bef-7d3b4f636f84).
        messagePayload:
          type: object
          additionalProperties: true
          description: Data payload send with the action
        createdAt:
          type: string
          format: date-time
          description: The time when the action was processed at the audit log service
          example: '2019-01-01T10:00:00+00:00'
    AuditLogsResponse: &ref_378
      type: array
      description: |
        List of Audit Logs.
      items: *ref_123
    Timeseries: &ref_124
      type: object
      description: Timeseries entity of tenant.
      properties:
        id:
          type: string
          description: The automatically assigned UUID for this timeseries.
          format: uuid
          example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
          readOnly: true
        name:
          type: string
          description: Name of the timeseries
          example: Temperature in the hall
        dataType: &ref_126
          description: JSON schema of timeseries data points.
          example:
            type: number
          type: object
          required:
            - type
          additionalProperties: false
          properties:
            type:
              type: string
              enum:
                - object
                - boolean
                - string
                - number
                - integer
            properties:
              type: object
              additionalProperties:
                $ref: 'http://json-schema.org/draft-07/schema#'
            additionalProperties:
              type: boolean
              description: Whether unspecified properties are allowed in the value
            required:
              type: array
              description: >-
                An array of configuration properties that are required in the
                value
              items:
                type: string
        metadata: &ref_125
          type: object
          description: List of key-value attached to timeseries
          minProperties: 1
          additionalProperties: true
          example:
            sourceId: 123e4567-e89b-12d3-a456-426655440000
            path: $.attributes.sensor.temperature
            room: '123'
      additionalProperties: false
    TimeseriesCreate: &ref_380
      title: Timeseries create object
      allOf:
        - *ref_124
        - required:
            - name
            - dataType
    TimeseriesUpdate: &ref_389
      title: Timeseries update object
      allOf:
        - *ref_124
        - minProperties: 1
    TimeseriesMetaData: *ref_125
    TimeseriesDataType: *ref_126
    TimeseriesFilter: &ref_130
      type: object
      description: Filter for timeseries
      minProperties: 1
      properties:
        timeseriesIds:
          type: array
          minLength: 1
          description: Filter timeseries by id (OR filter).
          items:
            type: string
            format: uuid
            description: The timeseries UUID.
            example: 123e4567-e89b-12d3-a456-426655440000
        metadata: *ref_125
      additionalProperties: false
    DataFilter: &ref_129
      type: object
      additionalProperties: false
      description: Start time and end time filter of the requested timeseries.
      properties:
        startTime:
          type: string
          format: date-time
          description: The start time of the time frame to request. (RFC 3339)
          example: '2015-08-01T00:05:14.318570484Z'
        endTime:
          type: string
          format: date-time
          description: The end time of the time frame to request. (RFC 3339)
          example: '2015-08-08T23:05:14.318570484Z'
    TimeseriesAggregatedDataPoints: &ref_397
      type: object
      required:
        - data
      properties:
        meta: *ref_127
        data:
          type: array
          items: *ref_128
    TimeseriesDataPoints: &ref_390
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items: *ref_128
    TimeseriesBulkDataPoint: &ref_403
      type: object
      description: Data point of a timeseries.
      required:
        - timeseriesId
        - time
        - value
      properties:
        timeseriesId:
          type: string
          format: uuid
        value:
          oneOf:
            - type: number
            - type: object
            - type: string
            - type: boolean
          description: The reported Value.
          example: 30
        time:
          type: string
          format: date-time
          description: See RFC 3339 as UTC with nanoseconds.
          example: '2015-08-04T19:05:14.318570484Z'
    TimeseriesRawRequest: &ref_399
      type: object
      description: Filter for timeseries data points
      additionalProperties: false
      required:
        - dataFilter
        - timeseriesFilter
      properties:
        dataFilter: *ref_129
        timeseriesFilter: *ref_130
    TimeseriesAggregatedRequest: &ref_398
      type: object
      description: Filter for timeseries data points with time aggregation
      additionalProperties: false
      required:
        - dataFilter
        - timeseriesFilter
        - params
      properties:
        dataFilter: *ref_129
        timeseriesFilter: *ref_130
        params:
          type: object
          additionalProperties: false
          required:
            - aggregation
          properties:
            aggregation:
              type: string
              description: Aggregation method
              example: max
              enum:
                - min
                - max
                - mean
                - sum
                - count
                - diff
                - first
                - last
            frameSize:
              type: string
              description: 'Time period for data aggregation '
              enum:
                - 1m
                - 5m
                - 15m
                - 30m
                - 1h
                - 1d
      example:
        dataFilter:
          startTime: '2015-08-01T00:05:14.318570484Z'
          endTime: '2015-08-08T00:05:14.318570484Z'
        timeseriesFilter:
          timeseriesIds:
            - 123e4567-e89b-12d3-a456-426655440000
          metadata:
            room: '1'
        params:
          aggregation: sum
          frameSize: 15m
    RequestStatus: &ref_401
      type: object
      additionalProperties: false
      required:
        - status
      properties:
        status:
          description: Text description of the current file creation stage
          type: string
          example: new
        createdAt:
          description: Time of the creation
          type: string
          format: date-time
          example: '2015-08-04T19:05:14.318570484Z'
        updatedAt:
          description: Time of the last update
          type: string
          format: date-time
          example: '2015-08-04T19:05:14.318570484Z'
  parameters:
    UserIdInPath:
      name: userId
      in: path
      required: true
      schema: *ref_39
    TenantIdInPath: &ref_342
      name: tenantId
      in: path
      required: true
      description: The tenant ID
      schema: *ref_110
    InviteIdInPath: &ref_163
      name: inviteId
      in: path
      required: true
      description: The invite UUID.
      schema:
        type: string
        format: uuid
        description: The invite UUID.
        example: 123e4567-e89b-12d3-a456-426655440000
    RoleIdInPath: &ref_187
      name: roleId
      in: path
      required: true
      description: The role UUID.
      schema:
        type: string
        format: uuid
        description: The role UUID.
        example: 123e4567-e89b-12d3-a456-426655440000
    PermissionIdInPath: &ref_181
      name: permissionId
      in: path
      required: true
      description: The permission ID.
      schema: *ref_13
    TenantsInQuery:
      name: tenants
      in: query
      required: true
      description: A comma-separated list of tenant IDs
      schema:
        type: array
        items: *ref_110
      style: form
      explode: false
    UserIdInQuery: &ref_186
      name: userId
      in: query
      description: The user UUID.
      schema:
        type: string
        format: uuid
        description: The user UUID.
        example: 123e4567-e89b-12d3-a456-426655440000
    StatusCodeInQuery:
      name: statusCode
      in: query
      description: The status the tenants are filtered for
      schema: *ref_28
    ApplicationIdInPath: &ref_335
      name: applicationId
      in: path
      required: true
      description: The application ID
      schema: *ref_97
    InviteStatusInQuery: &ref_158
      name: status
      in: query
      description: The invite status to be filtered by
      schema: *ref_34
    CustomPermissionIdInPath:
      name: customPermissionId
      in: path
      required: true
      description: A custom permission id
      schema: *ref_131
    ContractIdInQuery:
      name: contractId
      in: query
      required: true
      description: A contract id
      schema: *ref_132
    PageQuery: &ref_385
      name: page
      description: The number of the result page starting with 0.
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
    PageSizeQuery: &ref_386
      name: pageSize
      description: The number of result per page.
      in: query
      schema:
        type: integer
        minimum: 0
        default: 20
    ClientIIdInPath:
      name: clientId
      in: path
      required: true
      schema: *ref_40
    EmailInQuery:
      name: email
      in: query
      schema: *ref_38
    DeviceIdQuery: &ref_234
      in: query
      name: deviceId
      description: >-
        A comma separated list of device Ids which you want to use as a filter.
        Device will be selected if matches at least one item in a list
      style: form
      explode: false
      schema: *ref_62
    ConnectedByQuery: &ref_238
      name: deviceConnectedBy
      description: >-
        Filter the results to contain devices having one of the comma-separated
        list of 'connected by' provided here.
      in: query
      style: form
      explode: false
      schema: *ref_62
    DeviceIdInPath: &ref_290
      name: deviceId
      in: path
      required: true
      description: The devices uuid.
      schema:
        type: string
        description: The devices UUID.
        format: uuid
        example: 123e4567-e89b-12d3-a456-426655440000
    DeviceTypeIdInPath: &ref_204
      name: deviceTypeId
      in: path
      required: true
      description: The device type id.
      schema:
        type: string
        format: uuid
    AssociationIdInPath: &ref_214
      name: associationId
      in: path
      required: true
      description: The association id.
      schema:
        type: string
        format: uuid
    SlotNameInPath: &ref_212
      name: slotName
      in: path
      required: true
      description: The device type slot name.
      schema:
        type: string
        maxLength: 255
        pattern: '^([a-zA-Z0-9_]+)$'
    TagsQuery: &ref_235
      description: >-
        Filter the results to contain devices having one of the comma-separated
        list of tags provided here. Case-insensitive. Surround the tag with *
        for substring matching. Example: `*subString_of_a_tag*,fullMatching-Tag`
      name: deviceTag
      in: query
      style: form
      explode: false
      schema: *ref_133
    DeviceNameQuery: &ref_239
      description: >-
        Filter the results to contain devices having one of the comma-separated
        list of names provided here. Case-insensitive. Surround with * for
        substring matching. Example: *subString* OR fullMatchingName
      name: deviceName
      in: query
      style: form
      explode: false
      schema: *ref_134
    DeviceTypeNameQuery:
      description: >-
        Filter the results to contain device types having one of the
        comma-separated list of names provided here. Case-insensitive. Surround
        with * for substring matching. Example: *subString* OR fullMatchingName
      name: deviceTypeName
      in: query
      style: form
      explode: false
      schema: *ref_135
    CategoryQuery: &ref_237
      description: >-
        Filter the results to contain only entries having at least one of the
        provided categories. Example: [urn:example:test:category]
      name: deviceTypeCategory
      in: query
      style: form
      explode: false
      schema: *ref_136
    DeviceTypeIdQuery: &ref_236
      name: deviceTypeId
      in: query
      description: Filter returning results matching one of the provided device type IDs.
      style: form
      explode: false
      schema: *ref_137
    AliasQuery: &ref_240
      name: deviceAlias
      in: query
      description: >-
        Filter returning devices matching a one of device aliases. Supports
        wildcards using '*'. Example: 06-00-00-00-00-00 OR alias
      style: form
      explode: false
      schema: *ref_138
    EventTypes: &ref_250
      name: eventTypes
      in: query
      required: false
      description: >-
        A comma separated list of event types used as a filter. So only events
        with one of these types assigned will be returned.
      schema:
        type: array
        items:
          type: string
          pattern: '^[a-zA-Z0-9_]+$'
        example: 'type1,type2,type3'
      explode: false
      style: form
    CertIdInPath: &ref_266
      name: certId
      in: path
      required: true
      description: The certificate UUID.
      schema:
        type: string
        format: uuid
        description: The certificate UUID.
    DeviceParam: &ref_268
      name: deviceId
      in: path
      required: true
      description: The device to filter for (uuid)
      schema:
        type: string
        format: uuid
        description: The device UUID.
        example: 123e4567-e89b-12d3-a456-426655440000
    FirmwareIdInPath: &ref_279
      name: id
      in: path
      required: true
      description: The firmware ID
      schema:
        type: string
        format: uuid
        description: The firmware ID
    FirmwareInstallationIdInPath: &ref_288
      name: installationId
      in: path
      required: true
      description: The firmware installation ID
      schema:
        type: string
        format: uuid
        description: The firmware installation ID
    LatestOnlyQuery: &ref_287
      name: latestOnly
      description: >-
        The flag that allows returning only the latest successful installation
        per slot
      in: query
      schema:
        type: boolean
        default: false
    DumpIdInPath: &ref_310
      name: dumpId
      in: path
      required: true
      description: The UUID of the dump
      schema:
        type: string
        description: The UUID of the dump
        format: uuid
        example: 07aba39a-ccb3-426f-838e-6d9a9ae330f4
    PathQuery: &ref_291
      name: path
      in: query
      required: true
      description: >-
        Path matching to a path defined in the reporting rules of the device's
        type. (e.g. `$.attributes.brightness`).
      schema:
        type: string
        example: $.attributes.sensor.brightness
    StartTimeRequiredQuery: &ref_393
      name: startTime
      description: The start time of the time frame to request.
      in: query
      required: true
      schema:
        type: string
        format: date-time
        description: RFC 3339
    EndTimeRequiredQuery: &ref_394
      name: endTime
      description: The end time of the time frame to request.
      in: query
      required: true
      schema:
        type: string
        format: date-time
        description: RFC 3339
    AggregationQuery: &ref_396
      name: aggregation
      description: >-
        How should the values be aggregated. Supported values: min, max, mean,
        sum, count, diff, first, last.
      required: true
      in: query
      schema:
        type: string
        example: max
        enum:
          - min
          - max
          - mean
          - sum
          - count
          - diff
          - first
          - last
    TimeFrameSizeQuery: &ref_395
      name: frameSize
      in: query
      description: >
        The time frame size in which the values should be aggregated. By
        default, no frameSize is set and the data is not grouped by time - this
        means that the response contains exactly one result.
      required: false
      schema:
        type: string
        enum:
          - 1m
          - 5m
          - 15m
          - 30m
          - 1h
          - 1d
    StartTimeQuery: &ref_391
      name: startTime
      description: The start time of the time frame to request. (RFC 3339)
      in: query
      required: false
      schema:
        type: string
        format: date-time
        description: RFC 3339
    EndTimeQuery: &ref_392
      name: endTime
      description: The end time of the time frame to request. (RFC 3339)
      in: query
      required: false
      schema:
        type: string
        format: date-time
        description: RFC 3339
    Token: &ref_323
      name: token
      in: path
      required: true
      description: The token used to authenticate the WebSocket connection
      schema:
        type: string
        description: The token
        format: string
        example: bbdf5d13d9a09ab5cfe5c45536ecf4f432e9c4736aeb6d930ea240904d0ae7d8
    Type: &ref_325
      name: type
      in: path
      required: true
      description: The streaming type
      schema:
        type: string
        enum:
          - live
          - buffered
        example: live
    TenantInQuery:
      name: tenant
      in: query
      required: true
      description: The tenant ID
      schema: *ref_110
    ClientIdInQuery:
      name: client_id
      in: query
      required: true
      description: The OAuth client ID of the application
      schema:
        type: string
        description: client_id used in the process of authentication
    ClientScopesInQuery:
      name: client_scopes
      in: query
      description: A comma-separated list of scopes of the OAuth client of the application
      schema:
        type: array
        items:
          type: string
          description: scopes used for the client when authenticating
      style: form
      explode: false
      example: 'openid,olt-applications'
    InstalledInQuery: &ref_345
      name: installed
      in: query
      description: Filter for only installed applications
      schema:
        type: boolean
      allowEmptyValue: true
      example: true
    NotificationId: &ref_356
      name: notificationId
      in: path
      required: true
      description: Notification Id
      schema: *ref_120
    NotificationHistoryId:
      name: historyId
      in: path
      required: true
      description: Notification history Id
      schema: *ref_139
    RuleIdInPath: &ref_371
      name: ruleId
      in: path
      required: true
      description: The rule UUID.
      schema:
        type: string
        format: uuid
        description: The rule UUID.
        example: 123e4567-e89b-12d3-a456-426655440000
    DeviceIdInQuery:
      name: deviceId
      in: query
      required: true
      description: The device UUID.
      schema:
        type: string
        format: uuid
        description: The device UUID.
        example: 123e4567-e89b-12d3-a456-426655440000
    PathInQuery:
      name: path
      in: query
      required: true
      description: JSON Path for the attribute or configuration.
      schema:
        type: string
        pattern: ^(\$\.configuration\.|\$\.attributes\.)
        example: $.configuration.brightness
        description: JSON Path for the attribute or configuration.
    IntervalInQuery:
      name: interval
      in: query
      required: true
      description: Minimum time between triggered events in seconds
      schema:
        type: integer
        minimum: 0
        default: 360
    StartTimeInQuery: &ref_374
      name: startTime
      in: query
      description: RFC 3339-compliant start time
      schema:
        type: string
        format: date-time
    EndTimeInQuery: &ref_375
      name: endTime
      in: query
      description: RFC 3339-compliant end time
      schema:
        type: string
        format: date-time
    ActiveInQuery: &ref_366
      name: active
      in: query
      required: false
      description: Whether a rule should be executed and trigger events.
      schema:
        type: boolean
        example: 'true'
    PageInQuery: &ref_364
      name: page
      description: The number of the result page starting with 0.
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
    PageSizeInQuery: &ref_365
      name: pageSize
      description: The number of result per page.
      in: query
      schema:
        type: integer
        minimum: 0
        default: 20
    TenantIdsQuery:
      name: tenantIds
      description: Ids of tenants
      in: query
      schema:
        type: array
        items:
          type: string
          format: uuid
      style: form
      explode: false
    TimeseriesIdInPath: &ref_387
      name: timeseriesId
      in: path
      required: true
      description: The timeseries UUID.
      schema:
        type: string
        format: uuid
        description: The timeseries UUID.
        example: 123e4567-e89b-12d3-a456-426655440000
    RequestIdInPath: &ref_400
      name: requestId
      in: path
      required: true
      description: The UUID of the request
      schema:
        type: string
        description: The UUID of the request
        format: uuid
        example: 123e4567-e89b-12d3-a456-426655440000
    FileIdInPath: &ref_402
      name: fileId
      in: path
      required: true
      description: The UUID of the file
      schema:
        type: string
        description: The UUID of the file
        format: uuid
        example: 123e4567-e89b-12d3-a456-426655440000
  responses:
    BadRequest: &ref_381
      description: Bad Request response.
      content:
        application/json:
          schema:
            allOf:
              - *ref_140
              - type: object
                required:
                  - errorCode
                properties:
                  errorCode:
                    type: string
                    enum:
                      - TIMESERIES_VALIDATION
    Conflict:
      description: Conflict
      content:
        application/json:
          schema: &ref_379
            type: object
            additionalProperties: false
            required:
              - errorMessage
              - errorCode
            properties:
              errorMessage:
                type: string
                description: Error message with futher details.
              errorCode: *ref_141
          example:
            errorCode: CONFLICT
            errorMessage: Resource already exist
    Unauthorized: &ref_382
      description: Unauthorized response.
      content:
        application/json:
          schema:
            allOf:
              - *ref_140
              - type: object
                required:
                  - errorCode
                properties:
                  errorCode:
                    type: string
                    enum:
                      - TIMESERIES_UNAUTHORIZED
    Forbidden: &ref_383
      description: Access forbidden.
      content:
        application/json:
          schema:
            allOf:
              - *ref_140
              - type: object
                required:
                  - errorCode
                properties:
                  errorCode:
                    type: string
                    enum:
                      - TIMESERIES_RESOURCE_NOT_FOUND
    ForbiddenOrNotFound: &ref_309
      description: >-
        This response means you either do not have access to a specified
        resource or it does not even exist. The difference will not be exposed
        to the user to make iterating that much harder.
      content:
        application/json:
          schema: &ref_147
            type: object
            additionalProperties: false
            required:
              - errorMessage
              - errorCode
            properties:
              errorMessage:
                type: string
                description: Error message with futher details.
              errorCode:
                type: string
                description: These codes are specific to services
                enum:
                  - SENSORLAKEQUERY_UNKNOWN
                  - SENSORLAKEQUERY_RESOURCE_NOT_FOUND
                  - SENSORLAKEQUERY_UNAUTHORIZED
                  - SENSORLAKEQUERY_VALIDATION
                  - MEDIA_TYPE
    Maintenance: &ref_168
      description: This response means the resource(s) is currently down for maintenance
      content:
        application/json:
          schema: *ref_142
          example:
            errorCode: ID_MAINTENANCE
            errorMessage: Tenant creation is currently unavailable
    NotFound: &ref_388
      description: Resounce not found.
      content:
        application/json:
          schema:
            allOf:
              - *ref_140
              - type: object
                required:
                  - errorCode
                properties:
                  errorCode:
                    type: string
                    enum:
                      - TIMESERIES_RESOURCE_NOT_FOUND
    InternalServerError: &ref_384
      description: Internal Server Error response.
    DeviceTypeInUse: &ref_209
      description: DeviceType can not be deleted. It is being used by active devices.
      content:
        application/json:
          schema: &ref_143
            type: object
            required:
              - errorMessage
              - errorCode
            properties:
              errorMessage:
                type: string
                description: Error message with further details.
                example: Validation of deviceTypeId failed.
              errorCode:
                type: string
                description: The error name / meaning.
                example: DEVICE_VALIDATION
          example:
            errorMessage: 'DeviceType can not be deleted: is being used by active devices.'
            errorCode: DEVICE_DEVICETYPE_IN_USE
    ResourceConflict: &ref_208
      description: The device to use as connectedBy was not found.
      content:
        application/json:
          schema: *ref_143
          example:
            errorMessage: The device with uuid <uuid> to use as connectedBy was not found.
            errorCode: DEVICE_CONNECTEDBY_CONFLICT
    ActionAccepted: &ref_230
      description: Success - action accepted
      content:
        application/json:
          schema: *ref_144
          example:
            data:
              actionId: 0ac6c5ea-7944-44c1-9882-a5bcb50c82b3
    ServiceUnavailable:
      description: Service Unavailable response.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - errorCode
              - errorMessage
            properties:
              errorCode:
                type: string
                description: The error code.
                example: BILLING_FORBIDDEN
              errorMessage:
                type: string
                description: Error message with further details.
                example: You are not allowed to post events.
          example:
            errorCode: BILLING_SERVICE_NOT_AVAILABLE
            errorMessage: Service is temporary unavailable.
    Blob: &ref_281
      description: OK - Blob was successfully attached to the firmware.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              data:
                type: object
                required:
                  - downloadUrl
                additionalProperties: false
                properties:
                  downloadUrl:
                    type: string
                    description: The download URL for the blob
    DownloadSuccess:
      description: OK - Download blob data
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
            description: The binaray data
    BlobExistsAndIsLocked: &ref_283
      description: >-
        A blob is already attached to the firmware and it's locked. Which means
        that the blob cannot be changed or replaced with a new blob.
      content:
        application/json:
          schema: *ref_145
    BadRequestTimeseries: &ref_299
      description: Bad Request response.
      content:
        application/json:
          schema: &ref_146
            type: object
            additionalProperties: false
            required:
              - errorMessage
              - errorCode
            properties:
              errorMessage:
                type: string
                description: Error message with futher details.
                example: Please authenticate to use this endpoint.
              errorCode:
                type: string
                description: The error name / meaning.
                example: Unauthorized
          example:
            errorMessage: Request Body has to be an Object.
            errorCode: TIMESERIES_BADREQUEST
    BadRequestAggregated: &ref_293
      description: Bad Request response.
      content:
        application/json:
          schema: *ref_146
          example:
            errorMessage: Request Body has to be an Object.
            errorCode: AGGREGATEDTIMESERIES_BAD_REQUEST
    UnauthorizedTimeseries: &ref_300
      description: Unauthorized response.
      content:
        application/json:
          schema: *ref_146
          example:
            errorMessage: Authorization is missing or invalid
            errorCode: TIMESERIES_UNAUTHORIZED
    UnauthorizedAggregated: &ref_294
      description: Unauthorized response.
      content:
        application/json:
          schema: *ref_146
          example:
            errorMessage: Authorization is missing or invalid
            errorCode: AGGREGATEDTIMESERIES_UNAUTHORIZED
    ForbiddenTimeseries: &ref_301
      description: Forbidden response.
      content:
        application/json:
          schema: *ref_146
          example:
            errorMessage: required permissions are missing
            errorCode: TIMESERIES_NO_ACCESS_TO_RESOURCE
    ForbiddenAggregated: &ref_295
      description: Forbidden response.
      content:
        application/json:
          schema: *ref_146
          example:
            errorMessage: required permissions are missing
            errorCode: AGGREGATEDTIMESERIES_NO_ACCESS_TO_RESOURCE
    NotFoundTimeseries: &ref_302
      description: Not Found response.
      content:
        application/json:
          schema: *ref_146
          example:
            errorMessage: >-
              device does not exist or does not belong to the authenticated
              tenant
            errorCode: TIMESERIES_DEVICE
    NotFoundAggregated: &ref_296
      description: Not Found response.
      content:
        application/json:
          schema: *ref_146
          example:
            errorMessage: there is no device with the specified deviceId
            errorCode: AGGREGATEDTIMESERIES_DEVICEID
    InternalServerErrorTimeseries: &ref_303
      description: Internal Server Error response.
      content:
        application/json:
          schema: *ref_146
          example:
            errorMessage: Internal error
            errorCode: TIMESERIES_INTERNAL_ERROR
    InternalServerErrorAggregated: &ref_297
      description: Internal Server Error response.
      content:
        application/json:
          schema: *ref_146
          example:
            errorMessage: internal error
            errorCode: AGGREGATEDTIMESERIES_INTERNAL_ERROR
    DumpNotFound: &ref_314
      description: Dump not found
      content:
        application/json:
          schema: *ref_147
          example:
            errorMessage: specified dump not found
            errorCode: TIMESERIES_DUMP_NOT_FOUND
    ValidationFailed:
      description: Bad request
      content:
        application/json:
          schema: &ref_148
            type: object
            description: Error response
            required:
              - errorCode
              - errorMessage
            properties:
              errorCode:
                type: string
                description: The error code.
                example: STREAMING_BADREQUEST
              errorMessage:
                type: string
                description: Error message with futher details.
                example: Please authenticate to use this endpoint.
          example:
            errorCode: STREAMING_VALIDATION
            errorMessage: validation error
    InvalidToken: &ref_322
      description: Token is not valid
      content:
        application/json:
          schema: *ref_148
          example:
            errorCode: STREAMING_INVALID_TOKEN
            errorMessage: token is invalid.
    NotificationBadRequest: &ref_355
      description: Bad request
      content:
        application/json:
          schema: *ref_149
          example:
            errorCode: NOTIFICATION_BAD_REQUEST
            errorMessage: Could not parse request payload
    NotificationUnauthorized: &ref_352
      description: Authentication required
      content:
        application/json:
          schema: *ref_149
          example:
            errorCode: NOTIFICATION_UNAUTHORIZED
            errorMessage: Unauthorized
    NotificationForbidden: &ref_353
      description: Action is forbidden
      content:
        application/json:
          schema: *ref_149
          example:
            errorCode: NOTIFICATION_FORBIDDEN
            errorMessage: Forbidden
    NotificationNotFound: &ref_357
      description: Notification is not found
      content:
        application/json:
          schema: *ref_149
          example:
            errorCode: NOTIFICATION_RESOURCE_NOT_FOUND
            errorMessage: >-
              Notification with uuid 067ae601-30ea-4ee9-bf94-dcbe8dbe0329 not
              found
    NotificationInternalServerError: &ref_354
      description: Internal Server Error
      content:
        application/json:
          schema: *ref_149
          example:
            errorCode: NOTIFICATION_INTERNAL_ERROR
            errorMessage: Internal server error
  requestBodies:
    Firmware:
      description: Firmware to add to the system
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            additionalProperties: false
            properties:
              name:
                type: string
                maxLength: 255
                minLength: 1
                description: The name of the firmware
              description:
                type: string
                maxLength: 255
                description: Additional description
              version:
                type: string
                maxLength: 255
                description: Version string of the firmware
tags:
  - name: application-developer
  - name: application-info
    description: >
      Endpoints accessible only for your applications. Access by using
      `client_credentials` OAuth2 grant flow.
  - name: applications
    description: >
      Endpoints for a user to access available applications, install and
      uninstall these and more for application management to your tenants
      applications.
  - name: audit-logs
    description: >-
      Audit logs provide a detailed log on all relevant actions that users
      initiate via the OLT API.
  - name: certificates
    description: >-
      Certificates are used to authenticate a Device when it connects to the
      cloud. Therefore every Device which directly sends data to the cloud needs
      to have a certificate. If a Device A sends data to a Device B (acting as a
      gateway) which sends the data to the cloud. Device A does not need a
      certificate, only device B does.
  - name: device-types
    description: >-
      Device Types are used to describe the behaviour of a Device. This includes
      the schema of the data a Device reports or receives as well as information
      like model and description. Furthermore the Device Type specifies, where
      reported data is saved in the cloud by including reporting rules.
  - name: devices
    description: >-
      Devices are the things inside of the Lightelligence Platform. Devices
      reach from a small sensor unit over a mid sized gateway with internet
      connection to a full blown installation controller. Devices can be
      connected to the cloud by assigning an certificate or connecting it over
      another Device.
  - name: diagnostics
    description: >-
      With the diagnostics endpoints it is possible to debug what Device’s
      messages (reported data, events) are doing in the cloud. As MQTT does not
      return error messages, this is the way to see what fails in the process.
  - name: events
    description: >-
      Events can be reported by devices. Typical event could be temperatureHigh
      or maintainanceNeeded. Events differ from reported data by typically being
      triggered by reaching a threshold or an event in the Device’s environment.
      In a future version of the Lightelligence Platform events can be used to
      trigger notifications etc.
  - name: firmware-installation
  - name: firmwares
    description: >-
      Firmware resources represent files that can be pushed down or pulled by
      gateways and/or devices. Each firmware resource consists of some metadata,
      providing additional information like a version or description, and an
      attached file (blob). These files can be firmwares, bootloaders,
      configuration files or any binary data you want to manage.
  - name: ingest
    description: >-
      The ingest endpoints are the HTTP equivalent to the platforms MQTT
      Endpoints, where Devices can report their data. These HTTP endpoints can
      be used to implement a quick proof of concept. We don’t recommend to use
      them in deployed Devices.
  - name: notifications
    description: >-
      Notifications are created and configured by users. They use filters to
      process events and then trigger a notification that is sent to a specific
      channel (i.e. email) depending on its configuration.
  - name: oauth
  - name: roles-and-permissions
    description: >
      **To interact with the API of OLT**, the user needs to have the right set
      of permissions. Using these permissions, a tenant can limit what actions a
      user can access within the Lightelligence Platform.
  - name: rule-engine
    description: >
      Apply simple logic to data sent from your device and trigger device events
      to match your custom use case
  - name: streaming
    description: streaming related endpoints
  - name: tenants
    description: >-
      A Tenant is the entity owning everything except Users in the
      Lightelligence Platform. Devices, Device Types, Certificates etc. all
      belong to exactly one Tenant. Users can create Tenants and then add other
      users to the Tenant created Tenant.
  - name: timeseries
    description: >-
      The timeseries data enables the developer to get the data reported by a
      Device over time. For data to show up in the timeseries data a
      reportingRule in the Device Type of a Device with the value timeseries is
      needed.
  - name: user-management
  - name: users
    description: >-
      The User object represents the data of a human being interacting with the
      Lightelligence Platform. It includes the name and also the e-mail address.
      A User can create a Tenant and then take actions inside this Tenant e.g.
      creating a Device.
x-tagGroups:
  - name: Platform
    tags:
      - oauth
      - notifications
      - consumption
  - name: Tenants
    tags:
      - tenants
      - billing
      - cron
  - name: User Management
    collapsible: true
    tags:
      - users
      - user-management
      - roles-and-permissions
  - name: Application Management
    collapsible: true
    tags:
      - application-developer
      - applications
      - application-info
  - name: Device Management
    collapsible: true
    tags:
      - devices
      - device-types
      - certificates
      - firmwares
  - name: Device Actions
    collapsible: true
    tags:
      - events
      - rule-engine
      - firmware-installation
  - name: Device Data
    collapsible: true
    tags:
      - timeseries
      - ingest
      - streaming
  - name: Troubleshooting
    collapsible: true
    tags:
      - diagnostics
      - audit-logs
paths:
  '/users/{userId}':
    get:
      summary: Get user details
      description: |
        Get the user details for the supplied userId.<br>
      tags:
        - users
      x-olt-permissions: []
      parameters:
        - &ref_150
          name: userId
          in: path
          required: true
          description: The user UUID.
          schema:
            type: string
            format: uuid
            description: The user UUID.
            example: 123e4567-e89b-12d3-a456-426655440000
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    type: object
                    additionalProperties: false
                    description: User Representation
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: The UUID of the user
                        example: 123e4567-e89b-12d3-a456-426655440000
                        readOnly: true
                      enabled:
                        type: boolean
                        description: if the user is enabled
                        example: true
                        readOnly: true
                      email:
                        type: string
                        format: email
                        description: The e-mail of the user
                        example: foo@bar.com
                      emailVerified:
                        type: boolean
                        description: if the user's email is verified
                        example: true
                        readOnly: true
                      firstName:
                        type: string
                        description: The first name of the user
                        example: Heinz-Harald
                      lastName:
                        type: string
                        description: The last name of the user
                        example: Mueller
                      twoFactorAuthEnabled:
                        type: boolean
                        description: >-
                          Whether or not two-factor authentication is enabled
                          (TOTP)
                        example: true
                        readOnly: true
        '400': &ref_152
          description: Bad Request response.
          content:
            application/json:
              schema: *ref_142
              example:
                errorCode: ID_VALIDATION
                errorMessage: Request should follow schema
        '401': &ref_153
          description: Unauthorized response.
          content:
            application/json:
              schema: *ref_142
              example:
                errorCode: ID_UNAUTHORIZED
                errorMessage: Authorization missing in the header
        '403': &ref_154
          description: Forbidden
          content:
            application/json:
              schema: *ref_142
              example:
                errorCode: ID_FORBIDDEN
                errorMessage: Not allowed to access resource
        '404': &ref_155
          description: >-
            This response means you either do not have access to a specified
            resource or it does not even exist. The difference will not be
            exposed to the user to make iterating that much harder.
          content:
            application/json:
              schema: *ref_142
              example:
                errorCode: ID_RESOURCE_NOT_FOUND
                errorMessage: >-
                  Resource could not be found or access to resource is not
                  allowed
        '500': &ref_156
          description: Internal Server Error response.
  '/users/{userId}/tenants':
    get:
      summary: List tenants of user
      description: |
        Get the tenants of the provided user.

        * Ordered descending by tenant creation date.
      tags:
        - users
      x-olt-permissions: []
      parameters:
        - *ref_150
        - &ref_159
          name: page
          description: The number of the result page starting with 0.
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - &ref_160
          name: pageSize
          description: The number of results per page.
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: &ref_161
                    type: object
                    additionalProperties: false
                    description: common meta data for the payload.
                    required:
                      - page
                      - pageSize
                      - itemsTotal
                      - pagesTotal
                    properties:
                      page:
                        type: integer
                        description: The actual returned number of the page.
                      pageSize:
                        type: integer
                        description: The used page size.
                      itemsTotal:
                        type: integer
                        description: The total size of the data requested
                      pagesTotal:
                        type: integer
                        description: >-
                          The total number of available pages calculated from
                          pageSize and itemsTotal
                  data:
                    type: array
                    items: *ref_151
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  '/users/{userId}/tenants/{tenantId}':
    get:
      summary: Get tenant information
      description: >
        Get tenant information for the provided tenant and user. This will only
        succeed if the user is part of the logged in tenant.
      tags:
        - users
      x-olt-permissions: []
      parameters:
        - *ref_150
        - &ref_169
          name: tenantId
          in: path
          required: true
          description: The tenant UUID.
          schema:
            type: string
            format: uuid
            description: The tenant UUID.
            example: 123e4567-e89b-12d3-a456-426655440000
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_151
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  '/users/{userId}/permissions':
    get:
      summary: List user permissions
      description: >
        Get the list of permissions for the current user within the logged in
        tenant.
      tags:
        - users
        - roles-and-permissions
      x-olt-permissions: []
      parameters:
        - *ref_150
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    type: object
                    additionalProperties: false
                    required:
                      - permissions
                    properties:
                      customPermissions:
                        type: array
                        items: *ref_157
                      permissions:
                        type: array
                        items: *ref_157
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  '/users/{userId}/invites':
    get:
      summary: List invites of user
      description: |
        Get all invites for the current user.
        * Ordered descending by invite creation date.
      tags:
        - users
      x-olt-permissions: []
      parameters:
        - *ref_150
        - *ref_158
        - *ref_159
        - *ref_160
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_161
                  data:
                    type: array
                    items: *ref_162
        '401': *ref_153
        '403': *ref_154
        '500': *ref_156
  '/users/{userId}/invites/{inviteId}':
    patch:
      summary: Accept or decline invite
      description: >
        With this endpoint a user can accept or decline an invite. State changes
        are only possible for an invite with the status `open`. For example an
        already accepted invite can not be declined.
      tags:
        - users
      x-olt-permissions: []
      parameters:
        - *ref_150
        - *ref_163
      requestBody:
        content:
          application/json:
            schema: *ref_164
      responses:
        '200':
          description: Success - Invite updated
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_165
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': &ref_174
          description: Not found response.
          content:
            application/json:
              schema: *ref_142
              example:
                errorCode: ID_RESOURCE_NOT_FOUND
                errorMessage: Tenant does not exist
        '500': *ref_156
  /tenants:
    post:
      summary: Create tenant
      description: Create a new Tenant.
      tags:
        - tenants
      x-olt-permissions: []
      requestBody:
        content:
          application/json:
            schema: *ref_166
      responses:
        '201':
          description: Tenant creation successful
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_167
        '400': *ref_152
        '403': *ref_154
        '409': &ref_175
          description: Conflict response.
          content:
            application/json:
              schema: *ref_142
              example:
                errorCode: ID_CONFLICT
                errorMessage: Tenant already exists
        '500': *ref_156
        '503': *ref_168
  '/tenants/{tenantId}':
    get:
      summary: Get tenant details
      description: >
        Get the tenant detailed information including billing information for
        the supplied tenantId.<br/> <br> **Alternative endpoints:**<br/> *Basic
        information* of tenants can be fetched through the user self-management
        endpoints. <br/> * /users/{userId}/tenants -> Listing all tenants
        available for user<br/> * /users/{userId}/tenants/{tenantId} -> Get
        tenant with basic data including user roles
      tags:
        - tenants
      x-olt-permissions:
        - 'tenant:read'
      parameters:
        - *ref_169
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_170
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
    patch:
      summary: Update tenant details
      description: Update the tenant details with the supplied information.
      tags:
        - tenants
      x-olt-permissions:
        - 'tenant:write'
      parameters:
        - *ref_169
      requestBody:
        content:
          application/json:
            schema: *ref_171
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_171
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  '/tenants/{tenantId}/roles':
    get:
      deprecated: true
      summary: List tenant roles
      description: >
        **DEPRECATED, Please use [_GET
        /roles_](#tag/roles-and-permissions/paths/~1roles/get) endpoint**<br>
        Get the list of roles of a tenant.
      tags:
        - tenants
      x-olt-permissions:
        - 'tenant:read'
      parameters:
        - *ref_169
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_161
                  data:
                    type: array
                    items: *ref_172
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  '/tenants/{tenantId}/invites':
    post:
      summary: Invite user to tenant
      description: |
        Invite an user to a tenant.

        * Ordered descending by invite creation date.
      tags:
        - user-management
      x-olt-permissions:
        - 'tenant_user_management:write'
      parameters:
        - *ref_169
      requestBody:
        content:
          application/json:
            schema: *ref_173
      responses:
        '201':
          description: Success - Invite created
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_162
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_174
        '409': *ref_175
        '500': *ref_156
    get:
      summary: List invites of tenant
      description: Get all invites to users for the provided tenant.
      tags:
        - user-management
      x-olt-permissions:
        - 'tenant_user_management:read'
      parameters:
        - *ref_169
        - *ref_158
        - *ref_159
        - *ref_160
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_161
                  data:
                    type: array
                    items: *ref_162
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_174
        '500': *ref_156
  '/tenants/{tenantId}/invites/{inviteId}':
    delete:
      summary: Revoke open invite
      description: >
        Delete/Revoke the invite of a user to the tenant. Only open invites can
        be deleted.
      tags:
        - user-management
      x-olt-permissions:
        - 'tenant_user_management:write'
      parameters:
        - *ref_169
        - *ref_163
      responses:
        '204':
          description: Success - No content
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_174
        '500': *ref_156
  '/tenants/{tenantId}/users':
    get:
      summary: List users of tenant
      description: |
        Get the list of users associated to a tenant by any role.
        * Ordered descending by date of user-to-tenant assigment
      tags:
        - user-management
      x-olt-permissions:
        - 'tenant_user_management:read'
      parameters:
        - *ref_169
        - *ref_159
        - *ref_160
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_161
                  data:
                    type: array
                    items: *ref_176
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  '/tenants/{tenantId}/users/{userId}':
    delete:
      summary: Remove user from tenant
      description: Remove a user from a tenant.
      tags:
        - user-management
      x-olt-permissions:
        - 'tenant_user_management:write'
      parameters:
        - *ref_169
        - *ref_150
      responses:
        '204':
          description: Success
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  /permissions:
    get:
      summary: List permissions
      description: >
        Get the list of permissions for the tenant. Permissions are the
        permissions which are required and checked within the OLT platform.
        <br><br> To interact with the API of OLT, the user needs to have the
        right set of permissions. Using these permissions, a tenant owner can
        limit what actions a user can access within the Lightelligence Platform.
      tags:
        - roles-and-permissions
      x-olt-permissions: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    type: object
                    additionalProperties: false
                    required:
                      - permissions
                    properties:
                      permissions:
                        type: array
                        items: *ref_177
        '400': *ref_152
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  '/application-developer/applications/{applicationId}/custom-permissions':
    post:
      summary: Create custom permission
      description: >
        Create a new custom permission for an application. Custom permissions -
        although managed via the OLT API - have no impact on the OLT platform
        whatsoever. Their sole purpose is to allow access control management
        within an application: By assigning a custom permission to a role, an
        external application can use this permission to allow/restrict resource
        access within that application. Custom permissions are specified within
        the scope of an application. A tenant owner can assign custom
        permissions of all installed application to all available roles within a
        tenant.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:write'
      x-olt-transitive-permissions:
        - 'applications_development:read'
      parameters:
        - &ref_180
          name: applicationId
          in: path
          required: true
          description: An application id
          schema: *ref_23
      requestBody:
        content:
          application/json:
            schema: *ref_178
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_179
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '409': *ref_175
        '500': *ref_156
    get:
      summary: List custom permissions for an application
      description: |
        List all created custom permissions for an application.
        * Ordered descending by custom permission creation date.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:read'
      parameters:
        - *ref_180
        - *ref_159
        - *ref_160
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_161
                  data:
                    type: array
                    items: *ref_179
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  '/application-developer/applications/{applicationId}/custom-permissions/{permissionId}':
    get:
      summary: Custom permission details
      description: |
        Get details of a specific custom permission.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:read'
      parameters:
        - *ref_180
        - *ref_181
      responses:
        '200':
          description: Succsess
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_179
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
    patch:
      summary: Update custom permission
      description: >
        Update `category` or `description` of a specific custom permission.
        `name` and `alias` can only be changed by creating a new custom
        permission and deleting the old one.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:write'
      x-olt-transitive-permissions:
        - 'applications_development:read'
      parameters:
        - *ref_180
        - *ref_181
      requestBody:
        content:
          application/json:
            schema: *ref_182
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_183
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
    delete:
      summary: Delete custom permission
      description: >
        **Not yet implemented** Delete a specific custom permission. **Note**:
        Deleting a custom permission will also remove it from any roles it is
        assigned to.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:write'
      x-olt-transitive-permissions:
        - 'applications_development:read'
      parameters:
        - *ref_180
        - *ref_181
      responses:
        '204':
          description: Success (No further content)
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
  /roles:
    post:
      summary: Create role
      description: >
        Create a new role connected to the logged in tenant. <br> **Note**:
        Support of `alias` in `permissions` will be dropped in future
        versions<br> _All values can be updated after creation with [PATCH:
        Update Role ](#tag/roles-and-permissions/paths/~1roles~1{roleId}/patch)_
      tags:
        - roles-and-permissions
      x-olt-permissions:
        - 'tenant_user_management:write'
      x-olt-transitive-permissions:
        - 'applications:read'
      requestBody:
        content:
          application/json:
            schema: *ref_184
      responses:
        '201':
          description: Success - Role created
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_185
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '409': *ref_175
        '500': *ref_156
    get:
      summary: List roles
      description: >
        Get the list of roles for the tenant including the list of permissions
        id's for each role.

        * Ordered descending by role creation date.
      tags:
        - roles-and-permissions
      x-olt-permissions:
        - 'tenant_user_management:read'
      parameters:
        - *ref_186
        - *ref_159
        - *ref_160
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_161
                  data:
                    type: array
                    items: *ref_185
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '500': *ref_156
  '/roles/{roleId}':
    get:
      summary: Get role
      description: Get details for the role.
      tags:
        - roles-and-permissions
      x-olt-permissions:
        - 'tenant_user_management:read'
      parameters:
        - *ref_187
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_185
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_155
        '500': *ref_156
    delete:
      summary: Delete role
      description: |
        Delete role for tenant
      tags:
        - roles-and-permissions
      x-olt-permissions:
        - 'tenant_user_management:write'
      parameters:
        - *ref_187
      responses:
        '204':
          description: Success - No content
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '500': *ref_156
    patch:
      summary: Update role
      description: >
        Update the properties of a role. Which properties are modifiable can be
        viewed in the request body schema. <br/> **Note**: Support of `alias` in
        `permissions` will be dropped in future versions<br> **Note:** Updating
        `permissions` or `customPermissions` will replace the entire list of
        permissions.<br> At least id or alias are required when updating
        permissions.
      tags:
        - roles-and-permissions
      x-olt-permissions:
        - 'tenant_user_management:write'
      parameters:
        - *ref_187
      requestBody:
        content:
          application/json:
            schema: *ref_188
      responses:
        '200':
          description: Success - Role updated
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_189
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_174
        '409': *ref_175
        '500': *ref_156
  '/roles/{roleId}/users':
    get:
      summary: List users in role
      description: |
        Get the list of users in the role within the tenant.
        * Ordered descending by role assigment date.
      tags:
        - user-management
      x-olt-permissions:
        - 'tenant_user_management:read'
      parameters:
        - *ref_187
        - *ref_159
        - *ref_160
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_161
                  data:
                    type: array
                    items: *ref_190
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '500': *ref_156
  '/tenants/{tenantId}/users/{userId}/roles':
    get:
      summary: List roles of user
      description: |
        Get the list of roles for the user within the tenant.
        * Ordered descending by role creation date.
      tags:
        - user-management
      x-olt-permissions:
        - 'tenant_user_management:read'
      parameters:
        - *ref_169
        - *ref_150
        - *ref_159
        - *ref_160
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_161
                  data:
                    type: array
                    items: *ref_185
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '500': *ref_156
    put:
      summary: Change roles of user
      description: Change the roles of the user in the tenant.
      tags:
        - user-management
      x-olt-permissions:
        - 'tenant_user_management:write'
      parameters:
        - *ref_169
        - *ref_150
      requestBody:
        content:
          application/json:
            schema: *ref_191
      responses:
        '204':
          description: Success - Roles updated
        '400': *ref_152
        '401': *ref_153
        '403': *ref_154
        '404': *ref_174
        '500': *ref_156
  /id/auth/realms/olt:
    get:
      summary: Get basic realm info
      description: >
        Get basic realm info. This includes the public key, which can be used to
        ensure a JWT was correctly signed by this idp (identity provider). The
        provided `public_key` is not PEM encoded, so for JWT verification it
        still needs PEM padding. To verify any issued JWT the key can be padded
        like: <pre><code>-----BEGIN PUBLIC KEY-----<br/>{{ACTUAL
        KEY}}<br/>-----END PUBLIC KEY-----</code></pre>
      tags:
        - oauth
      x-olt-permissions: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                required:
                  - public_key
                properties:
                  public_key: *ref_192
        '500': &ref_194
          description: Internal Server Error response
    servers:
      - *ref_193
  /id/auth/realms/olt/protocol/openid-connect/auth:
    post:
      summary: Get authorization code
      description: >
        This is the URL endpoint for the Authorization Code Flow to get a
        temporary code to later exchange for a token. Use this code with the
        /token endpoint to get a user token. <br /><br /> **Userinfo:** provide
        optional scopes `email profile` to include more user information in
        authentication session. <br />Next step is to exchange the authorization
        code for a token at [GET
        /protocol/openid-connect/token](#tag/oauth/paths/~1id~1auth~1realms~1olt~1protocol~1openid-connect~1token/post)
      tags:
        - oauth
      x-olt-permissions: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: false
              required:
                - client_id
                - redirect_uri
                - scope
                - response_type
                - response_mode
              properties:
                client_id:
                  description: The ID of the OAuth2 client
                  type: string
                  example: 123e4567-e89b-12d3-a456-426655440000
                redirect_uri:
                  description: Valid redirect uri for the current client
                  type: string
                  format: uri
                scope: *ref_37
                response_type:
                  description: Response type for auth grant flow
                  type: string
                  enum:
                    - code
                response_mode:
                  description: Define how the response should be returned
                  type: string
                  enum:
                    - form_post
                    - query
                    - fragment
                nonce:
                  description: Required if using "response_mode=form_post"
                  type: string
      responses:
        '200':
          description: 'Success, callback to redirect_uri'
        '400':
          description: Bad Request response.
        '500': *ref_194
    servers:
      - *ref_193
  /id/auth/realms/olt/protocol/openid-connect/token:
    post:
      summary: Get access token
      description: >
        Openid endpoint to get an access token. Based on the `grant_type`
        different flows work here. <br /><br /> When using `refresh_token` as
        `grant_type` the new returned access token will be scoped with the same
        tenant as the previous one. Optionally the header `tenant` can be used
        to obtain a new access token for the user with a different tenant. This
        may not always work (the user might not be part of the tenant, the
        application might not be installed to the tenant or other reasons can
        forbid this operation). <br /><br /> **Tip:** Get user information by
        exchanging the token for userinfo at [GET
        /protocol/openid-connect/userinfo](#tag/oauth/paths/~1id~1auth~1realms~1olt~1protocol~1openid-connect~1userinfo/get)
      tags:
        - oauth
      x-olt-permissions: []
      parameters:
        - in: header
          name: tenant
          description: >
            Set the `tenant` the token should be valid for. This header is only
            supported when the `grant_type` is set to either `refresh_token` or
            `client_credentials`.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: false
              required:
                - client_id
                - grant_type
              properties:
                client_id:
                  description: The ID of the OAuth2 client
                  type: string
                  example: 123e4567-e89b-12d3-a456-426655440000
                client_secret:
                  description: >-
                    Secret to use with your clientId. (Not required if using
                    'public' client)
                  type: string
                grant_type: *ref_195
                redirect_uri:
                  description: >
                    Valid redirect uri for the current client<br/> - Required if
                    using authorization_code grant flow
                  type: string
                  format: uri
                code:
                  description: The Authorization Code if using Authorization Code Flow
                  type: string
                scope: *ref_37
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: *ref_196
        '400':
          description: Bad Request response.
          content:
            application/json:
              schema: *ref_197
              example:
                error: invalid_grant
                error_description: Code not valid
        '500': *ref_194
    servers:
      - *ref_193
  /id/auth/realms/olt/protocol/openid-connect/userinfo:
    get:
      summary: Get UserInfo for current user
      description: >
        The UserInfo endpoint is an OAuth 2.0 protected resource where client
        applications can retrieve consented claims, or assertions, about the
        logged in end-user. This is retrieved by using a valid access_token for
        the OLT platform through the Authorization header.<br/>
      tags:
        - oauth
      x-olt-permissions: []
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: *ref_198
        '400':
          description: Bad Request response.
          content:
            application/json:
              schema: *ref_197
              example:
                error: invalid_request
                error_description: Token not provided
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema: *ref_197
              example:
                error: invalid_token
                error_description: 'Token invalid: Failed to read access token from JWT'
        '500': *ref_194
    servers:
      - *ref_193
  /id/auth/admin/realms/olt/users:
    servers:
      - *ref_193
  '/id/auth/admin/realms/olt/users/{userId}':
    servers:
      - *ref_193
  /id/auth/admin/realms/olt/clients:
    servers:
      - *ref_193
  '/id/auth/admin/realms/olt/clients/{clientId}':
    servers:
      - *ref_193
  '/id/auth/admin/realms/olt/clients/{clientId}/client-secret':
    servers:
      - *ref_193
  /device-types:
    post:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:write'
      summary: Create new device type
      description: Registers a new device type that can be used for Lightelligence devices.
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_199
      responses:
        '201':
          description: Success - device-type added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_199
        '400': &ref_201
          description: Bad Request response.
          content:
            application/json:
              schema: *ref_143
              example:
                errorMessage: 'Validation of ''<field name or path>'' failed: <reason>.'
                errorCode: DEVICE_VALIDATION
        '401': &ref_202
          description: Unauthorized response.
          content:
            application/json:
              schema: *ref_143
              example:
                errorMessage: Authorization is missing or invalid.
                errorCode: ID_UNAUTHORIZED
        '403': &ref_206
          description: Forbidden response.
          content:
            application/json:
              schema: *ref_143
              example:
                errorMessage: User not allowed to access.
                errorCode: DEVICE_FORBIDDEN
        '500': &ref_203
          description: Internal Server Error response.
          content:
            application/json:
              schema: *ref_143
              example:
                errorMessage: An internal server error occurred.
                errorCode: DEVICE_INTERNAL_ERROR
    get:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:read'
      summary: List available device types
      description: >-
        Provides a list of device types available for your tenant, ordered by
        creation date from newest to oldest. The list can be filtered by name,
        semantic categories or device type ids. Filter entries can be either
        provided as query parameters or in the request body, but not both.
      parameters:
        - &ref_216
          name: page
          description: The number of the result page starting with 0.
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - &ref_217
          name: pageSize
          description: The number of result per page.
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
        - description: >-
            Filter the results to contain device types having one of the
            comma-separated list of names provided here. Case-insensitive.
            Surround with * for substring matching. Example: *subString* OR
            fullMatchingName
          name: deviceTypeName
          in: query
          style: form
          explode: false
          schema: *ref_63
        - &ref_220
          description: >-
            Filter the results to contain only entries having at least one of
            the provided categories. Example: [urn:example:test:category]
          name: deviceTypeCategory
          in: query
          style: form
          explode: false
          schema: *ref_64
        - &ref_219
          name: deviceTypeId
          in: query
          description: >-
            Filter returning results matching one of the provided device type
            IDs.
          style: form
          explode: false
          schema: *ref_65
      requestBody:
        content:
          application/json:
            schema: *ref_200
      responses:
        '200':
          description: Success - device-types
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta: &ref_224
                    type: object
                    description: common meta data for the payload.
                    required:
                      - page
                      - pageSize
                      - pagesTotal
                      - itemsTotal
                    properties:
                      page:
                        type: integer
                        description: The actual returned number of the page.
                      pageSize:
                        type: integer
                        description: The used page size.
                      pagesTotal:
                        type: integer
                        description: Total number of pages
                      itemsTotal:
                        type: integer
                        description: Total number of items
                    additionalProperties: false
                  data:
                    type: array
                    items: *ref_199
        '400': *ref_201
        '401': *ref_202
        '500': *ref_203
  /device-types/categories:
    get:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:read'
      summary: List categories used in device types
      description: Provides a list of semantic categories used in your device types.
      parameters: []
      responses:
        '200':
          description: Success - device-types-categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_50
        '400': *ref_201
        '401': *ref_202
        '500': *ref_203
  '/device-types/{deviceTypeId}':
    get:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:read'
      summary: Get device type
      description: Get a specific device type by UUID
      parameters:
        - *ref_204
      responses:
        '200':
          description: Success - requested device-type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_199
        '400': *ref_201
        '401': *ref_202
        '404': &ref_207
          description: Not Found response.
          content:
            application/json:
              schema: *ref_143
              example:
                errorMessage: Resource not found.
                errorCode: DEVICE_RESOURCE_NOT_FOUND
        '500': *ref_203
    patch:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:write'
      summary: Modify device type
      description: >-
        Edit a specific device type by UUID partially. UUID is not patchable.
        You can also only patch a single property from your custom data. Provide
        a `null` to delete a property.
      parameters:
        - *ref_204
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_205
      responses:
        '200':
          description: Success - edited device-type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_199
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '404': *ref_207
        '409': *ref_208
        '500': *ref_203
    delete:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:write'
      summary: Remove device type
      description: >-
        Delete a specific device type by UUID. Device types currently associated
        with devices cannot be removed.
      parameters:
        - *ref_204
      responses:
        '204':
          description: Success - deleted device-type.
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '404': *ref_207
        '409': *ref_209
        '500': *ref_203
  '/device-types/{deviceTypeId}/onlinemonitoring':
    patch:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:write'
      summary: Modify online monitoring rules of device type
      description: Edit the online monitoring configurations for a device type by UUID
      parameters:
        - *ref_204
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_210
      responses:
        '200':
          description: Success - edited online monitoring configuration of device-type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_210
        '400': *ref_201
        '401': *ref_202
        '403': &ref_211
          description: Forbidden or not found response.
          content:
            application/json:
              schema: *ref_143
              example:
                errorMessage: User not allowed to access or resource not found.
                errorCode: DEVICE_FORBIDDEN_OR_NOT_FOUND
    get:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:read'
      summary: Get online monitoring rules of device type
      description: Get the online monitoring configurations for a device type by UUID
      parameters:
        - *ref_204
      responses:
        '200':
          description: >-
            Success - requested online monitoring configurations for a
            device-type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_210
        '400': *ref_201
        '401': *ref_202
        '403': *ref_211
  '/device-types/{deviceTypeId}/slots/{slotName}/firmware-associations':
    post:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:write'
      summary: Associate firmware with device type slot
      description: >-
        Associate an existing firmware with a slot in the provided device type.
        After this, the firmware can be installed into the slot on all devices
        having this device type.
      parameters:
        - *ref_204
        - *ref_212
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Device type slot firmware definition
              required:
                - firmwareId
              properties:
                firmwareId:
                  description: Device firmware UUID
                  type: string
                  format: uuid
              additionalProperties: false
      responses:
        '201':
          description: Success - associated device type firmwares.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_213
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '404': *ref_207
        '409': *ref_208
        '500': *ref_203
    get:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:read'
      summary: Get device type firmwares
      description: >-
        Retrieve the list of firmwares associcated with the specified slot on
        the specified device type. All the firmwares listed here can be
        installed into the slot on all devices having this device type
      parameters:
        - *ref_204
        - *ref_212
      responses:
        '200':
          description: Success - requested device type firmwares.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: *ref_213
        '400': *ref_201
        '401': *ref_202
        '404': *ref_207
        '500': *ref_203
  '/device-types/{deviceTypeId}/slots/{slotName}/firmware-associations/{associationId}':
    delete:
      tags:
        - device-types
      x-olt-permissions:
        - 'devicetypes:write'
      summary: Removal of an association
      description: >-
        Removal of an association for a slot in specified device type. After
        removal of an association, all existing installation and installation
        requests will continue to run.
      parameters:
        - *ref_204
        - *ref_212
        - *ref_214
      responses:
        '204':
          description: Success - removal of an association.
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '404': *ref_207
        '500': *ref_203
  /devices:
    post:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:write'
      summary: Create new device
      description: >-
        Registers a new device for your Lightelligence tenant. If a
        configuration is provided and the device is connected to a gateway via
        `connectedBy`, the gateway will receive a configuration update via MQTT.
      requestBody:
        content:
          application/json:
            schema: *ref_215
      responses:
        '201':
          description: Success - created device.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_215
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '409': *ref_208
        '500': *ref_203
    get:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:read'
      summary: List available devices
      description: >-
        This endpoint returns a list of devices, ordered by creation date from
        newest to oldest. The list can be filtered by provided filter. Filter
        entries can be either provided as query parameters or in the request
        body, but not both. Each of these filters has to match, so if multiple
        are provided, the device has to match both filters. For each of the
        filters, multiple values can be provided. If multiple values are
        provided, the filter matches if the device matches any of the provided
        values. So if for example multiple device tags are provided, any device
        having at least one of the tags is returned.
      parameters:
        - *ref_216
        - *ref_217
        - in: query
          name: deviceId
          description: >-
            A comma separated list of device Ids which you want to use as a
            filter. Device will be selected if matches at least one item in a
            list
          style: form
          explode: false
          schema: *ref_54
        - description: >-
            Filter the results to contain devices having one of the
            comma-separated list of tags provided here. Case-insensitive.
            Surround the tag with * for substring matching. Example:
            `*subString_of_a_tag*,fullMatching-Tag`
          name: deviceTag
          in: query
          style: form
          explode: false
          schema: *ref_218
        - *ref_219
        - *ref_220
        - name: deviceConnectedBy
          description: >-
            Filter the results to contain devices having one of the
            comma-separated list of 'connected by' provided here.
          in: query
          style: form
          explode: false
          schema: *ref_54
        - description: >-
            Filter the results to contain devices having one of the
            comma-separated list of names provided here. Case-insensitive.
            Surround with * for substring matching. Example: *subString* OR
            fullMatchingName
          name: deviceName
          in: query
          style: form
          explode: false
          schema: *ref_221
        - name: deviceAlias
          in: query
          description: >-
            Filter returning devices matching a one of device aliases. Supports
            wildcards using '*'. Example: 06-00-00-00-00-00 OR alias
          style: form
          explode: false
          schema: *ref_222
      requestBody:
        content:
          application/json:
            schema: *ref_223
      responses:
        '200':
          description: Success - requested devices.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta: *ref_224
                  data:
                    type: array
                    items: *ref_225
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '500': *ref_203
  /devices/tags:
    get:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:read'
      summary: List tags used in devices
      description: Provides a list of tags used in your devices.
      parameters: []
      responses:
        '200':
          description: Success - requested device.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: *ref_226
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '500': *ref_203
  '/devices/{deviceId}':
    get:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:read'
      summary: Get device
      description: Get a device by its UUID.
      parameters:
        - &ref_227
          name: deviceId
          in: path
          required: true
          description: The devices UUID.
          schema:
            type: string
            format: uuid
            description: The devices UUID.
            example: 123e4567-e89b-12d3-a456-426655440000
      responses:
        '200':
          description: Success - requested device.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_215
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '404': *ref_207
        '500': *ref_203
    patch:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:write'
      summary: Modify device
      description: >-
        Edit the device's data. Updating the configuration of a device will
        trigger a configuration synchronization message that will be sent to the
        device or the gateway, which the device is connected to, via MQTT.
      parameters:
        - *ref_227
      requestBody:
        content:
          application/json:
            schema: *ref_228
      responses:
        '200':
          description: Success - edited the devices data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_215
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '404': *ref_207
        '500': *ref_203
    delete:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:write'
      summary: Remove device
      description: Delete a device by its UUID.
      parameters:
        - *ref_227
      responses:
        '204':
          description: Success - device deleted.
        '400': *ref_201
        '401': *ref_202
        '403': *ref_206
        '404': *ref_207
        '500': *ref_203
  '/devices/{deviceId}/onlinemonitoring':
    patch:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:write'
      summary: Modify online monitoring rules of device
      description: Edit the online monitoring configurations for a device by UUID
      parameters:
        - *ref_227
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_210
      responses:
        '200':
          description: Success - edited online monitoring configuration of device.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_210
        '400': *ref_201
        '401': *ref_202
        '403': *ref_211
    get:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:read'
      summary: Get online monitoring rules of device
      description: Get the online monitoring configurations for a device by UUID
      parameters:
        - *ref_227
      responses:
        '200':
          description: Success - requested online monitoring configurations for a device.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_210
        '400': *ref_201
        '401': *ref_202
        '403': *ref_211
  '/devices/{deviceId}/actions':
    post:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:write'
      summary: Trigger action on device
      description: The action name and payload will be transmitted to the device via MQTT.
      parameters:
        - *ref_227
      requestBody:
        content:
          application/json:
            schema: *ref_229
      responses:
        '202': *ref_230
        '400': *ref_201
        '401': *ref_202
        '404': *ref_207
        '500': *ref_203
  /devices/actions:
    post:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_base_data:write'
      summary: Trigger actions on devices matching given filter
      description: >
        The action name and payload will be transmitted to the devices matching
        the given filter via MQTT. The action will only be sent to the devices
        where it matches the schema of the device type.
      requestBody:
        content:
          application/json:
            schema: *ref_231
      responses:
        '204':
          description: Bulk actions request was accepted.
        '400': *ref_201
        '401': *ref_202
        '500': *ref_203
  '/devices/{deviceId}/state':
    get:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_states:read'
      summary: Get device state
      description: >-
        Get the current state of a device. Device state contains the latest
        values for attributes and configuration, as sent by the device.
      parameters:
        - name: deviceId
          in: path
          required: true
          description: The devices uuid.
          schema:
            type: string
            description: The devices UUID.
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
      responses:
        '200':
          description: Success - the device's state.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data: *ref_232
        '400': &ref_246
          description: Bad Request response.
          content:
            application/json:
              schema: &ref_233
                type: object
                required:
                  - errorMessage
                  - errorCode
                properties:
                  errorMessage:
                    type: string
                    description: Error message with futher details.
                    example: Please authenticate to use this endpoint.
                  errorCode:
                    type: string
                    description: The error name / meaning.
                    example: Unauthorized
              example:
                errorMessage: 'Validation of ''<field name or path>'' failed: <reason>.'
                errorCode: DEVICESTATE_VALIDATION
        '401': &ref_247
          description: Unauthorized response.
          content:
            application/json:
              schema: *ref_233
              example:
                errorMessage: Authorization is missing or invalid.
                errorCode: ID_UNAUTHORIZED
        '403': &ref_248
          description: Forbidden response.
          content:
            application/json:
              schema: *ref_233
              example:
                errorMessage: User not allowed to access.
                errorCode: DEVICESTATE_FORBIDDEN
        '404':
          description: Not Found response.
          content:
            application/json:
              schema: *ref_233
              example:
                errorMessage: Resource not found.
                errorCode: DEVICESTATE_RESOURCE_NOT_FOUND
        '500': &ref_249
          description: Internal Server Error response.
          content:
            application/json:
              schema: *ref_233
              example:
                errorMessage: An internal server error occurred.
                errorCode: DEVICESTATE_INTERNAL_ERROR
  /devices/states:
    get:
      tags:
        - devices
      x-olt-permissions:
        - 'devices_states:read'
      summary: Get bulk device states
      description: >-
        Get the current state of each Device which matches the provided filter,
        ordered by creation date from newest to oldest. The state of a Device
        contains the latest value of each attribute and configuration.
      parameters:
        - name: page
          description: The number of the result page starting with 0.
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: pageSize
          description: The number of result per page.
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
        - *ref_234
        - *ref_235
        - *ref_236
        - *ref_237
        - *ref_238
        - *ref_239
        - *ref_240
      requestBody:
        content:
          application/json:
            schema: *ref_241
      responses:
        '200':
          description: Success - the requested devices states.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  meta:
                    type: object
                    description: common meta data for the payload.
                    required:
                      - page
                      - pageSize
                      - pagesTotal
                      - itemsTotal
                    additionalProperties: false
                    properties:
                      page:
                        type: integer
                        description: The actual returned number of the page.
                      pageSize:
                        type: integer
                        description: The used page size.
                      pagesTotal:
                        type: integer
                        description: The total number of pages
                      itemsTotal:
                        type: integer
                        description: The total number of items
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        deviceId:
                          description: ID of the device that matched the provided filter
                          type: string
                          format: uuid
                          example: eba878ba-4a5d-4e67-b9d4-4dfd4e55f32f
                        configuration: *ref_242
                        attributes: *ref_243
                        lastSeen: *ref_244
                        status: *ref_245
        '400': *ref_246
        '401': *ref_247
        '403': *ref_248
        '500': *ref_249
  '/devices/{deviceId}/last-events':
    get:
      tags:
        - devices
        - events
      x-olt-permissions:
        - 'devices_historical_data:read'
      summary: Get last hour of events for device
      description: >-
        Retrieve the events received inside last hour, latest first. Events can
        be filtered by their type. **Note:** This endpoint should only be used
        for debugging.
      parameters:
        - name: deviceId
          in: path
          required: true
          description: The devices uuid.
          schema:
            type: string
            description: The devices UUID.
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
        - *ref_250
      responses:
        '200':
          description: Success - the device's events.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: *ref_66
        '400': &ref_253
          description: Bad Request response.
          content:
            application/json:
              schema: &ref_251
                type: object
                required:
                  - errorCode
                  - errorMessage
                additionalProperties: false
                properties:
                  errorCode:
                    type: string
                    description: The error code.
                    example: DEVICEEVENT_FORBIDDEN
                  errorMessage:
                    type: string
                    description: Error message with further details.
                    example: You are not allowed to post events.
              example:
                errorMessage: 'Validation of ''<field name or path>'' failed: <reason>.'
                errorCode: DEVICE_VALIDATION
        '401': &ref_254
          description: Unauthorized response.
          content:
            application/json:
              schema: *ref_251
              example:
                errorMessage: Authorization is missing or invalid.
                errorCode: ID_UNAUTHORIZED
        '403': &ref_255
          description: Forbidden response.
          content:
            application/json:
              schema: *ref_251
              example:
                errorMessage: User not allowed to access.
                errorCode: DEVICE_FORBIDDEN
        '404': &ref_256
          description: Not Found response.
          content:
            application/json:
              schema: *ref_251
              example:
                errorMessage: Resource not found.
                errorCode: DEVICE_RESOURCE_NOT_FOUND
        '500': &ref_257
          description: Internal Server Error response.
          content:
            application/json:
              schema: *ref_251
              example:
                errorMessage: An internal server error occurred.
                errorCode: DEVICE_INTERNAL_ERROR
  /event-ingest:
    post:
      summary: Send device event
      description: >-
        Send an event associated with a device. This endpoint can be used to
        emulate a real device sending events. The event type must be registered
        in the device type schema.
      requestBody:
        content:
          application/json:
            schema: *ref_252
      tags:
        - events
        - ingest
      x-olt-permissions:
        - 'ingest:write'
      responses:
        '202':
          description: Success - Event has been sent for processing.
        '400': *ref_253
        '401': *ref_254
        '403': *ref_255
        '404': *ref_256
        '500': *ref_257
  '/devices/{deviceId}/certificates':
    post:
      tags:
        - devices
        - certificates
      x-olt-permissions:
        - 'device_certificates:write'
      summary: Assign certificate to device
      description: >-
        Assign a certificate to a device. The certificate can then be used for
        authenticating the device when it connects to Lightelligence, for
        example through MQTT. A certificate can only be assigned to exactly one
        device.
      parameters:
        - &ref_260
          name: deviceId
          in: path
          required: true
          description: The devices UUID.
          schema:
            type: string
            format: uuid
            description: The devices UUID.
            example: 123e4567-e89b-12d3-a456-426655440000
      requestBody:
        content:
          application/json:
            schema: *ref_258
      responses:
        '201':
          description: Success - certificate.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_258
        '400': &ref_261
          description: Bad Request response.
          content:
            application/json:
              schema: &ref_259
                type: object
                required:
                  - errorMessage
                  - errorCode
                properties:
                  errorMessage:
                    type: string
                    description: Error message with futher details.
                    example: Validation of deviceId failed.
                  errorCode:
                    type: string
                    description: The error code for the client to process.
                    example: DEVICECERT_VALIDATION
                additionalProperties: false
              example:
                errorMessage: 'Validation of ''<field name or path>'' failed: <reason>.'
                errorCode: DEVICECERT_VALIDATION
        '401': &ref_262
          description: Unauthorized response.
          content:
            application/json:
              schema: *ref_259
              example:
                errorMessage: Authorization is missing or invalid.
                errorCode: ID_UNAUTHORIZED
        '403': &ref_263
          description: Forbidden response.
          content:
            application/json:
              schema: *ref_259
              example:
                errorMessage: User not allowed to access.
                errorCode: DEVICECERT_FORBIDDEN
        '404': &ref_264
          description: Not Found response.
          content:
            application/json:
              schema: *ref_259
              example:
                errorMessage: Resource not found.
                errorCode: DEVICECERT_RESOURCE_NOT_FOUND
        '409':
          description: Resource to create conflicts with an existing one.
          content:
            application/json:
              schema: *ref_259
              example:
                errorMessage: The certificate is already in use.
                errorCode: DEVICECERT_CERT_DUPLICATE
        '500': &ref_265
          description: Internal Server Error response.
          content:
            application/json:
              schema: *ref_259
              example:
                errorMessage: An internal server error occurred.
                errorCode: DEVICECERT_INTERNAL_ERROR
    get:
      tags:
        - devices
        - certificates
      x-olt-permissions:
        - 'device_certificates:read'
      summary: List certificates assigned to device
      description: >-
        Provides a list of the certificates assigned to this device, ordered by
        creation date from newest to oldest.
      parameters:
        - name: page
          description: The number of the result page starting with 0.
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: pageSize
          description: The number of result per page.
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
        - *ref_260
      responses:
        '200':
          description: Success - certificate.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    description: common meta data for the payload.
                    required:
                      - page
                      - pageSize
                    properties:
                      page:
                        type: integer
                        description: The actual returned number of the page.
                      pageSize:
                        type: integer
                        description: The used page size.
                  data:
                    type: array
                    items: *ref_258
        '400': *ref_261
        '401': *ref_262
        '403': *ref_263
        '404': *ref_264
        '500': *ref_265
  '/devices/{deviceId}/certificates/{certId}':
    get:
      tags:
        - devices
        - certificates
      x-olt-permissions:
        - 'device_certificates:read'
      summary: Get device certificate
      description: Get the details of the certificate associated with a device.
      parameters:
        - *ref_260
        - *ref_266
      responses:
        '200':
          description: Success - certificate.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_258
        '400': *ref_261
        '401': *ref_262
        '403': *ref_263
        '404': *ref_264
        '500': *ref_265
    patch:
      tags:
        - devices
        - certificates
      x-olt-permissions:
        - 'device_certificates:write'
      summary: Modify device certificate
      description: Edit the details of the certificate associated with a device.
      parameters:
        - *ref_260
        - *ref_266
      requestBody:
        content:
          application/json:
            schema: *ref_267
      responses:
        '200':
          description: Success - certificate.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_258
        '400': *ref_261
        '401': *ref_262
        '403': *ref_263
        '404': *ref_264
        '500': *ref_265
    delete:
      tags:
        - devices
        - certificates
      x-olt-permissions:
        - 'device_certificates:write'
      summary: Remove device certificate
      description: Delete the certificate associated with a device.
      parameters:
        - *ref_260
        - *ref_266
      responses:
        '204':
          description: Success - certificate deleted.
        '400': *ref_261
        '401': *ref_262
        '403': *ref_263
        '404': *ref_264
        '500': *ref_265
  '/devices/{deviceId}/last-diagnostics':
    get:
      tags:
        - devices
        - diagnostics
      summary: Get device diagnostics
      description: >-
        Get diagnostics data for the last hour, as reported for the device with
        the given UUID. Device Diagnostics contain errors in handling the data
        from the device on the cloud side. Data will be returned in descending
        order.
      parameters:
        - *ref_268
      x-olt-permissions:
        - 'devices_base_data:read'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items: *ref_269
        '400':
          description: Bad Request response.
          content:
            application/json:
              schema: &ref_270
                type: object
                required:
                  - errorMessage
                  - errorCode
                additionalProperties: false
                properties:
                  errorMessage:
                    type: string
                    description: Error message with futher details.
                    example: Validation of deviceTypeId failed.
                  errorCode:
                    type: string
                    description: The error name / meaning.
                    example: DEVICEDIAGNOSTICS_VALIDATION
              example:
                errorMessage: 'Validation of ''<field name or path>'' failed: <reason>.'
                errorCode: DEVICEDIAGNOSTICS_VALIDATION
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema: *ref_270
              example:
                errorMessage: Authorization is missing or invalid.
                errorCode: ID_UNAUTHORIZED
        '404':
          description: Not Found response.
          content:
            application/json:
              schema: *ref_270
              example:
                errorMessage: Resource not found.
                errorCode: DEVICEDIAGNOSTICS_RESOURCE_NOT_FOUND
        '500':
          description: Internal Server Error response.
          content:
            application/json:
              schema: *ref_270
              example:
                errorMessage: An internal server error occurred.
                errorCode: DEVICEDIAGNOSTICS_INTERNAL_ERROR
  /firmwares:
    post:
      tags:
        - firmwares
      summary: Creates a new firmware
      description: >
        This endpoint creates a new firmware resource. Once a firmware is
        created, arbitrary blob data can be attached to the firmware resource.
        Blob data can be a firmware file, configuration file or any other binary
        data. Firmware resources without attached blob data will become invalid
        after 5 minutes.
      x-olt-permissions:
        - 'firmware:write'
      requestBody:
        description: Firmware to add to the system
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              additionalProperties: false
              properties:
                name:
                  type: string
                  description: The name of the firmware
                  maxLength: 255
                  minLength: 1
                description:
                  type: string
                  description: Additional description for the firmware
                  maxLength: 255
                  nullable: true
                version:
                  type: string
                  maxLength: 255
                  nullable: true
                  description: A string that describes the version of the firmware
      responses:
        '201':
          description: >-
            Firmware was successfully created. Please note, that as long as
            there is no blob attached to the firmware not all fields in the
            response are set.
          content:
            application/json:
              schema:
                type: object
                description: Some test
                properties:
                  data: *ref_271
        '400': &ref_282
          description: >-
            Your request could not be processed. This could e.g. mean that the
            provided JSON is not valid and cannot be parsed or that the object
            submitted to a POST or PATCH request failed to validate against JSON
            schema.
          content:
            application/json:
              schema: *ref_272
        '401': &ref_276
          description: >-
            Your request is not authorized. This response means that you are not
            authorized to get access to the requested resource.
          content:
            application/json:
              schema: *ref_273
        '403': &ref_277
          description: >-
            This response means you either do not have access to a specified
            resource or it does not even exist. The difference will not be
            exposed to the user to make iterating that much harder.
          content:
            application/json:
              schema: *ref_274
        '500': &ref_278
          description: Internal Server Error response.
          content:
            application/json:
              schema: *ref_275
    get:
      tags:
        - firmwares
      summary: Get all firmwares
      description: >-
        This endpoint returns a list with all available firmwares, ordered by
        creation date from newest to oldest.
      x-olt-permissions:
        - 'firmware:read'
      parameters:
        - name: page
          description: The number of the result page starting with 0
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: pageSize
          description: The number of items per page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  meta:
                    type: object
                    description: Common meta data for the response.
                    required:
                      - page
                      - pageSize
                    additionalProperties: false
                    properties:
                      page:
                        type: integer
                        description: The actual returned number of the page.
                      pageSize:
                        type: integer
                        description: The used page size.
                  data:
                    type: array
                    items: *ref_271
        '401': *ref_276
        '403': *ref_277
        '500': *ref_278
  '/firmwares/{id}':
    get:
      tags:
        - firmwares
      summary: Get a firmware
      description: This endpoint returns a firmware for the specified UUID.
      x-olt-permissions:
        - 'firmware:read'
      parameters:
        - *ref_279
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data: *ref_271
        '401': *ref_276
        '403': *ref_277
        '500': *ref_278
    delete:
      tags:
        - firmwares
      summary: Deletes a firmware
      description: >-
        This endpoint allows the deletion of a firmware. All blob data
        associated with this firmware will also be deleted.
      x-olt-permissions:
        - 'firmware:write'
      parameters:
        - *ref_279
      responses:
        '204':
          description: Firmware successfully deleted.
        '401': *ref_276
        '403': *ref_277
        '500': *ref_278
  '/firmwares/{id}/blob':
    post:
      tags:
        - firmwares
      summary: Attach a blob to a firmware
      description: >-
        This endpoind allows the attaching of a blob to the specified firmware.
        Blob data can be a binary firmware file, configuration file or any other
        binary data is accepted. When a blob is attached to a firmware, a
        download link for the blob is added to the firmware resource which can
        be used to download the blob. Please note, that it's only allowed to
        attach a blob once. In case a blob is attached more than once you will
        get a 423 status code indicating that the resource is locked.
      x-olt-permissions:
        - 'firmware:write'
      parameters:
        - *ref_279
      requestBody:
        description: The blob data. Can be any arbitrary binary data.
        required: true
        content:
          application/octet-stream:
            schema: *ref_280
      responses:
        '200': *ref_281
        '400': *ref_282
        '401': *ref_276
        '403': *ref_277
        '423': *ref_283
        '500': *ref_278
    get:
      tags:
        - firmwares
      summary: Downloads a blob
      description: This endpoint allows you to dowload an attached blob.
      x-olt-permissions:
        - 'firmware:read'
      parameters:
        - *ref_279
      responses:
        '302':
          description: 302 response
          headers:
            Location:
              schema:
                type: string
        '400': *ref_282
        '401': *ref_276
        '403': *ref_277
        '500': *ref_278
  '/devices/{deviceId}/firmware-installations':
    post:
      tags:
        - devices
        - firmwares
        - firmware-installation
      summary: Create firmware installation for device
      description: >
        This endpoint creates a new firmware installation resource. This
        resource represents the status of installation into the slot for the
        specific device. Once it created, the device start receives installation
        instructions via MQTT.
      x-olt-permissions:
        - 'firmware:write'
      parameters:
        - &ref_286
          name: deviceId
          in: path
          required: true
          description: The device ID
          schema:
            type: string
            format: uuid
            description: The device ID
      requestBody:
        description: Firmware installation to add to the system.
        required: true
        content:
          application/json:
            schema: *ref_284
      responses:
        '201':
          description: Firmware installation was successfully created.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data: *ref_285
        '400': *ref_282
        '401': *ref_276
        '403': *ref_277
        '500': *ref_278
    get:
      tags:
        - devices
        - firmwares
        - firmware-installation
      summary: Get list of firmware installations for device
      description: This endpoint returns a list of firmware installations for a device.
      x-olt-permissions:
        - 'firmware:read'
      parameters:
        - *ref_286
        - *ref_287
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items: *ref_285
        '401': *ref_276
        '403': *ref_277
        '500': *ref_278
  '/devices/{deviceId}/firmware-installations/{installationId}':
    get:
      tags:
        - devices
        - firmwares
        - firmware-installation
      summary: Get firmware installation
      description: |
        This endpoint returns a firmware-installation for the specified UUID.
      x-olt-permissions:
        - 'firmware:read'
      parameters:
        - *ref_286
        - *ref_288
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data: *ref_285
        '401': *ref_276
        '403': *ref_277
        '500': *ref_278
    patch:
      tags:
        - devices
        - firmwares
        - firmware-installation
      x-olt-permissions:
        - 'firmware:read'
        - 'firmware:write'
      summary: Update firmware installation status
      description: >
        This endpoint enables updating the status of firmware installation for a
        device. This installation status is tracking on the cloud side. Used by
        devices/gateways/analytics/etc which report statuses of the installation
        firmware into the slot.
      parameters:
        - *ref_286
        - *ref_288
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_289
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data: *ref_285
        '401': *ref_276
        '403': *ref_277
        '500': *ref_278
  '/devices/{deviceId}/aggregated-timeseries':
    get:
      x-olt-permissions:
        - 'devices_historical_data:read'
      summary: Get aggregated timeseries for device
      description: >-
        Get aggregated timeseries data for the device with the given UUID. Data
        will be returned in descending order. Maximum 4000 data points are
        returned.
      tags:
        - timeseries
        - devices
      parameters:
        - *ref_290
        - name: startTime
          description: The start time of the time frame to request.
          in: query
          required: true
          schema:
            type: string
            format: date-time
            description: RFC 3339
        - name: endTime
          description: The end time of the time frame to request.
          in: query
          required: true
          schema:
            type: string
            format: date-time
            description: RFC 3339
        - name: frameSize
          in: query
          description: >-
            The time frame size in which the values should be aggregated. By
            default, no frameSize is set and the data is not grouped by time.
            This means that the response contains exactly one result. In case
            frameSize is set and the number of points in the response exceed
            4000, an error (400) will be returned.
          required: false
          schema:
            type: string
            enum:
              - 1m
              - 5m
              - 30m
              - 1h
              - 1d
        - name: aggregation
          description: >-
            How should the values be aggregated. Supported values: min, max,
            mean, sum, count, diff, first, last.
          required: true
          in: query
          schema:
            type: string
            example: max
            enum:
              - min
              - max
              - mean
              - sum
              - count
              - diff
              - first
              - last
        - *ref_291
      responses:
        '200':
          description: Success - data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: *ref_292
        '400': *ref_293
        '401': *ref_294
        '403': *ref_295
        '404': *ref_296
        '500': *ref_297
  '/devices/{deviceId}/last-timeseries':
    get:
      x-olt-permissions:
        - 'devices_historical_data:read'
      summary: Get last hour of timeseries for device
      description: >-
        Get timeseries data for the last hour, as reported by the device with
        the given UUID. Data will be returned in an descending order. Maximum
        4000 data points are returned. **Note:** This endpoint should be used by
        the user only for debugging his devices and the data they send.
      tags:
        - devices
        - timeseries
      parameters:
        - *ref_290
        - *ref_291
      responses:
        '200':
          description: Success - sensordata.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta: *ref_298
                  data:
                    type: array
                    items: &ref_306
                      type: object
                      description: Datapoint of the requested timeseries data.
                      additionalProperties: false
                      required:
                        - time
                        - value
                      properties:
                        value:
                          oneOf:
                            - type: string
                            - type: number
                            - type: integer
                            - type: boolean
                          description: The reported Value.
                          example: 30
                        time:
                          type: string
                          format: date-time
                          description: See RFC 3339 as UTC with nanoseconds.
                          example: '2015-08-04T19:05:14.318570484Z'
        '400': *ref_299
        '401': *ref_300
        '403': *ref_301
        '404': *ref_302
        '500': *ref_303
  '/devices/{deviceId}/timeseries':
    delete:
      x-olt-permissions:
        - 'devices_historical_data:write'
      summary: Delete timeseries data of device
      description: >-
        Delete reported timeseries data of a device belonging to the given UUID.
        This deletes both the timeseries and its aggregation. If no timeframe is
        provided, all data for the device and path is deleted.
      tags:
        - devices
        - timeseries
      parameters:
        - *ref_290
        - *ref_291
        - name: startTime
          description: The start time of the time frame to request. (RFC 3339)
          in: query
          required: false
          schema:
            type: string
            format: date-time
            description: RFC 3339
        - name: endTime
          description: The end time of the time frame to request. (RFC 3339)
          in: query
          required: false
          schema:
            type: string
            format: date-time
            description: RFC 3339
      responses:
        '204':
          description: Success.
        '400': *ref_299
        '401': *ref_300
        '403': *ref_301
        '404': *ref_302
        '500': *ref_303
  '/devices/{deviceId}/timeseries-dump':
    post:
      x-olt-permissions:
        - 'devices_historical_data:read'
      summary: Request dump of timeseries data for device
      description: >-
        Create a new timeseries dump, as reported by the device with the given
        UUID. The dump will be created asynchronously, and once completed will
        be available in the URL returned by this route. If no start and end time
        are specified, the dump contains all available data.
      tags:
        - devices
        - timeseries
      security:
        - oAuthSample: []
      parameters:
        - *ref_290
      requestBody:
        content:
          application/json:
            schema: *ref_304
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data: *ref_305
        '400': *ref_299
        '401': *ref_300
        '403': *ref_301
        '404': *ref_302
        '500': *ref_303
  '/devices/{deviceId}/timeseries-dump/{dumpId}':
    get:
      x-olt-permissions:
        - 'devices_historical_data:read'
      summary: Download generated timeseries dump for device
      description: >-
        Return a timeseries dump created asynchronously via a POST request. If
        the dump is not yet ready, this route will respond with a 404. All
        created dumps will expire after one hour.
      tags:
        - devices
        - timeseries
      security:
        - oAuthSample: []
      parameters:
        - *ref_290
        - name: dumpId
          in: path
          required: true
          description: The UUID of the dump
          schema:
            type: string
            description: The UUID of the dump
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
      responses:
        '200':
          description: A JSON file
          content:
            application/json:
              schema:
                type: array
                items: *ref_306
        '400': *ref_299
        '401': *ref_300
        '403': *ref_301
        '404':
          description: Dump not found
          content:
            application/json:
              schema: *ref_146
              example:
                errorMessage: specified dump not found
                errorCode: TIMESERIES_DUMP_NOT_FOUND
        '500': *ref_303
  /devices/timeseries-dump:
    post:
      x-olt-permissions:
        - 'devices_historical_data:read'
      summary: Request dump of timeseries data for multiple devices
      description: >
        Create a new dump of selected timeseries data. The dump will be created
        asynchronously, and once completed will be available in the URL returned
        by this route.
      tags:
        - timeseries
        - devices
      requestBody:
        content:
          application/json:
            schema: *ref_307
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                additionalProperties: false
                properties:
                  data: *ref_308
        '400': &ref_312
          description: Bad Request response.
          content:
            application/json:
              schema: *ref_147
        '401': &ref_313
          description: Unauthorized response.
          content:
            application/json:
              schema: *ref_147
        '403': *ref_309
        '500': &ref_315
          description: Internal Server Error response.
  '/devices/timeseries-dump/{dumpId}':
    get:
      x-olt-permissions:
        - 'devices_historical_data:read'
      summary: Download generated timeseries dump for multiple devices
      description: >
        Return a timeseries dump created asynchronously via a POST request. If
        the dump is not yet ready, this route will respond with a 404. All
        created dumps will expire after one hour.
      tags:
        - timeseries
        - devices
      security:
        - oAuthSample: []
      parameters:
        - *ref_310
      responses:
        '200':
          description: A JSON file
          content:
            application/json:
              schema:
                type: array
                items: *ref_311
        '400': *ref_312
        '401': *ref_313
        '403': *ref_309
        '404': *ref_314
        '500': *ref_315
  /devices/aggregated-timeseries:
    post:
      tags:
        - timeseries
        - devices
      x-olt-permissions:
        - 'devices_historical_data:read'
      summary: Request aggregated timeseries data dump for multiple devices
      description: >
        Get aggregated timeseries data points for the devices matching the given
        filters. The data dump will be created asynchronously, and once
        completed will be available at the URL returned by this route. Data
        points in the dump will be sorted chronologically from newest to oldest.
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_316
      responses:
        '202':
          description: Request accepted
          headers:
            Location:
              description: >-
                This the download url where the generated dump can be downloaded
                once it is available
              schema:
                type: string
              example: >-
                https://api.lightelligence.io/v1/devices/aggregated-timeseries/351ff402-2a9b-4d22-9066-97c976c50298
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                additionalProperties: false
                properties:
                  data:
                    type: object
                    required:
                      - url
                    additionalProperties: false
                    properties:
                      url:
                        type: string
                        format: url
                        description: >-
                          This the download url where the generated dump can be
                          downloaded once it is available
                        example: >-
                          https://api.lightelligence.io/v1/devices/aggregated-timeseries/07aba39a-ccb3-426f-838e-6d9a9ae330f4
        '400': *ref_312
        '401': *ref_313
        '403': *ref_309
        '500': *ref_315
  '/devices/aggregated-timeseries/{dumpId}':
    get:
      x-olt-permissions:
        - 'devices_historical_data:read'
      summary: Download aggregated timeseries data dump for multiple devices
      description: >
        Return an aggregated timeseries data dump created asynchronously via a
        POST request. If the dump is not yet ready, this route will respond with
        a 404. All created dumps will expire after one hour. Data points in the
        dump will be sorted chronologically from newest to oldest.
      tags:
        - timeseries
        - devices
      security:
        - oAuthSample: []
      parameters:
        - *ref_310
      responses:
        '200':
          description: A JSON file
          content:
            application/json:
              schema:
                type: array
                items: *ref_317
        '400': *ref_312
        '401': *ref_313
        '403': *ref_309
        '404': *ref_314
        '500': *ref_315
  /data-ingest:
    post:
      x-olt-permissions:
        - 'ingest:write'
      summary: Send device data
      description: >-
        Send data associated with a device. This endpoint can be used to emulate
        a real device sending data, or to import existing data sets. The payload
        must be compatible with the device type schema.
      tags:
        - ingest
      security:
        - oAuthSample: []
      requestBody:
        content:
          application/json:
            schema: *ref_318
      responses:
        '202':
          description: Success - Event has been sent for processing.
        '400':
          description: Bad Request response.
          content:
            application/json:
              schema: &ref_319
                type: object
                additionalProperties: false
                required:
                  - statusCode
                  - message
                  - error
                properties:
                  statusCode:
                    type: integer
                    description: The statuscode.
                    example: 401
                  message:
                    type: string
                    description: Error message with futher details.
                    example: Please authenticate to use this endpoint.
                  error:
                    type: string
                    description: The error name / meaning.
                    example: Unauthorized
              example:
                error:
                  statusCode: 400
                  message: Request Body has to be an Object.
                  error: Bad Request
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema: *ref_319
              example:
                error:
                  statusCode: 401
                  message: User not authorized.
                  error: Unauthorized
        '403':
          description: Forbidden response.
          content:
            application/json:
              schema: *ref_319
              example:
                error:
                  statusCode: 403
                  message: User not allowed to access.
                  error: Forbidden
  /devices/streaming-connections:
    post:
      x-olt-permissions:
        - 'devices_streaming:read'
      summary: Request new WebSocket streaming connection
      description: >
        Request a new WebSocket connection URL. If the request and
        authentication is successful

        the provided URL from the response can be used to establish a new
        WebSocket connection.


        The stream capabilities depend on its type.
          - `live` stream: service starts streaming events once connection is established.
          When client reconnects again, stream starts from the point of connection. Events that
          happened when client was disconnected are dropped.

          - `buffered` stream: service starts buffering events once connected. Events streamed from the persistent storage,
          so there is might be some latency comparing to live streams. Events stay in the buffer for 2 days.
          It means if time between reconnections is shorter than 2 days, already consumed events can be deliverd again.
          The age of events to deliver is specified by `options.replayFromTimestamp` parameter.
          If the client wouldn't make any new connections longer than 2 days after last disconnect, the service will
          stop buffering for the given client.

        **Note**: The WebSocket connection URL is only valid for 15 seconds. If
        the url has expired,

        a new url needs to be requested.
      tags:
        - devices
        - streaming
      security:
        - oAuthSample: []
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_320
      responses:
        '200':
          description: >-
            Success - A new WebSocket connection can be established with the
            provided WebSocket URL in the response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_321
        '400':
          description: Bad request
          content:
            application/json:
              schema: *ref_148
              examples:
                badRequest:
                  value:
                    errorCode: STREAMING_BADREQUEST
                    errorMessage: could not decode request payload
                validationFailed:
                  value:
                    errorCode: STREAMING_VALIDATION
                    errorMessage: validation error
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: *ref_148
              example:
                errorCode: OLT_UNAUTHORIZED
                errorMessage: Unauthorized
        '403': *ref_322
        '500': &ref_324
          description: Internal Server Error
          content:
            application/json:
              schema: *ref_148
              example:
                errorCode: STREAMING_INTERNAL_ERROR
                errorMessage: Internal server error
  '/devices/streaming-connections/{token}/ws':
    get:
      deprecated: true
      x-olt-permissions:
        - 'devices_streaming:read'
      x-olt-transitive-permissions:
        - 'devices_base_data:read'
      summary: Open WebSocket Streaming Connection
      description: >-
        IMPORTANT NOTE: this path is likely to change, **DO NOT RELY ON THE
        EXACT PATH**, just take the URL that is returned from the POST as is.

        * Opens a new WebSocket connection. If the provided token is valid, the
        request will be upgraded to a WebSocket connection.

        * Once the WebSocket connection is established the client receives
        updates for all subscribed message types matching the device filter.

        * The following message types are sent to the client (you can find the
        message specification in the _Models_ section): **AttributeUpdate**,
        **ConfigurationUpdate** and **Event**.

        * The client has to be aware that the websocket can be closed at any
        time; in that case the client has to create a new websocket by POSTing
        to the /devices/streaming-connections endpoint again.

        * The WebSocket API is only used for unidirectional traffic for now.
        Messages from the client are ignored by the server.

        * **Un-ordered messages:** Websocket messages can be published
        un-ordered. Use `time` to order the messages received in the client.
      tags:
        - devices
        - streaming
      parameters:
        - *ref_323
      responses:
        '403': *ref_322
        '500': *ref_324
  '/devices/streaming-connections/{token}/ws/{type}':
    get:
      x-olt-permissions:
        - 'devices_streaming:read'
      x-olt-transitive-permissions:
        - 'devices_base_data:read'
      summary: Open WebSocket Streaming Connection
      description: >-
        IMPORTANT NOTE: **DO NOT RELY ON THE EXACT PATH**, just take the URL
        that is returned from the POST as is.

        * Opens a new WebSocket connection. If the provided token is valid, the
        request will be upgraded to a WebSocket connection.

        * Once the WebSocket connection is established the client receives
        updates for all subscribed message types matching the device filter.

        * The following message types are sent to the client (you can find the
        message specification in the _Models_ section): **AttributeUpdate**,
        **ConfigurationUpdate** and **Event**.

        * The client has to be aware that the websocket can be closed at any
        time; in that case the client has to create a new websocket by POSTing
        to the /devices/streaming-connections endpoint again.

        * The WebSocket API is only used for unidirectional traffic for now.
        Messages from the client are ignored by the server.

        * **Un-ordered messages:** Websocket messages can be published
        un-ordered. Use `time` to order the messages received in the client.
      tags:
        - devices
        - streaming
      parameters:
        - *ref_323
        - *ref_325
      responses:
        '403': *ref_322
        '500': *ref_324
  /application-developer/applications:
    post:
      summary: Create an application
      description: >
        This endpoint creates a new application for the tenant. The tenant of
        the user session will become the "owner" (also referred to as developer
        tenant) of the application. The `redirectUris` should be provided as a
        security mechanism to lock the OAuth2 callback URIs. Once the
        application got created, the `oauth2Client.id` of the application can be
        used as OAuth2 client ID and the `oauth2Client.secret` of the
        application must be used as the secret of the OAuth2 client. If the
        `withPublicOauth2Client` property was set, the `oauth2PublicClient.id`
        can also be used as OAuth2 client ID, but in this case without the
        secret. <br /> <br /> To actually use the OAuth2 clients of the
        application a tenant must be added to the `allowedTenants` of the
        application and the tenant must install the application. Adding a tenant
        to the `allowedTenants` can be achieved by either providing the
        `allowedTenants` property directly with this request or later by using
        the [_PUT
        /allowed-tenants_](#tag/application-developer/paths/~1application-developer~1applications~1{applicationId}~1allowed-tenants~1{tenantId}/put)
        endpoint. To install the application the "user" tenant must use the
        [_POST
        /installation_](#tag/applications/paths/~1applications~1{applicationId}~1installation/post)
        endpoint. <br /> <br /> Note: To test the application as "owner", also
        the developer tenant must follow the steps for adding the developer
        tenant ID to the `allowedTenants` and install the application.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:write'
      requestBody:
        content:
          application/json:
            schema: *ref_326
      responses:
        '201':
          description: Success - Application created
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_327
        '400': &ref_331
          description: Bad Request
          content:
            application/json:
              schema: *ref_328
              example:
                errorCode: APP_VALIDATION
                errorMessage: Request Body has to follow schemas
        '401': &ref_332
          description: Unauthorized
          content:
            application/json:
              schema: *ref_328
              example:
                errorCode: APP_UNAUTHORIZED
                errorMessage: Authorization missing in the header
        '403': &ref_333
          description: Forbidden
          content:
            application/json:
              schema: *ref_328
              example:
                errorCode: APP_FORBIDDEN
                errorMessage: Invalid tenantid provided in access token
        '409': &ref_348
          description: Conflict
          content:
            application/json:
              schema: *ref_328
              example:
                errorCode: APP_CONFLICT
                errorMessage: Application already exist
        '500': &ref_334
          description: Internal Server Error
    get:
      summary: List developed applications
      description: >
        This endpoint lists all applications, which are developed by the tenant.
        The tenant is extracted from the current user session.

        * Ordered descending by `createdAt`.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:read'
      parameters:
        - &ref_340
          name: page
          description: The requested page
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - &ref_341
          name: pageSize
          description: The amount of results per page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Success - List of developed applications
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_329
                  data:
                    type: array
                    description: List of developed applications
                    items: *ref_330
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '500': *ref_334
  '/application-developer/applications/{applicationId}':
    get:
      summary: Get details of developed application
      description: |
        Get detailed information for the developed application.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:read'
      parameters:
        - *ref_335
      responses:
        '200':
          description: Success - Detailed Application Data
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_336
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': &ref_337
          description: Not found
          content:
            application/json:
              schema: *ref_328
              example:
                errorCode: APP_RESOURCE_NOT_FOUND
                errorMessage: Application does not exist
        '500': *ref_334
    delete:
      summary: Delete developed application
      description: Delete the developed application.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:write'
      parameters:
        - *ref_335
      responses:
        '204':
          description: Success - Application deleted
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '500': *ref_334
    patch:
      summary: Update developed application
      description: >
        Update details of the developed application. When the `status` property
        of the application is updated to `"inactive"`, the application cannot be
        installed and does not have access to any tenants' data anymore.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:write'
      parameters:
        - *ref_335
      requestBody:
        content:
          application/json:
            schema: *ref_338
      responses:
        '200':
          description: Success - Application updated
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_339
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '500': *ref_334
  '/application-developer/applications/{applicationId}/allowed-tenants':
    get:
      summary: List allowed tenants
      description: List tenants that can install the application.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:read'
      parameters:
        - *ref_335
        - *ref_340
        - *ref_341
      responses:
        '200':
          description: Success - List of allowed tenants
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_329
                  data: *ref_102
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '500': *ref_334
  '/application-developer/applications/{applicationId}/allowed-tenants/{tenantId}':
    put:
      summary: Add allowed tenant
      description: >
        This endpoint allows a specific tenant to install the application as
        after creating a new application no tenant is allowed to access it. The
        passed `tenanatId` will __not__ be verified for existence, but one may
        use the `comment` property, to better identify the tenant. Once the
        tenant successfully installed the application, the `installed` flag will
        be set to true and the `tenantName` will be available.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:write'
      parameters:
        - *ref_335
        - *ref_342
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                comment: *ref_82
      responses:
        '200':
          description: Success - Allowed tenant added
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_85
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '500': *ref_334
    delete:
      summary: Remove allowed tenant
      description: >
        Remove access for the tenant to use the application and don't allow the
        tenant to install the application anymore.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:write'
      parameters:
        - *ref_335
        - *ref_342
      responses:
        '204':
          description: Success - Allowed tenant removed
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '500': *ref_334
  '/application-developer/applications/{applicationId}/secret':
    post:
      summary: Regenerate secret for application
      description: >
        Generate a new secret for the application. Once the new secret is
        generated the old one will not work anymore.
      tags:
        - application-developer
      x-olt-permissions:
        - 'applications_development:write'
      parameters:
        - *ref_335
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              description: Need to provide an empty object here.
      responses:
        '201':
          description: Success - Application secret created
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    type: object
                    additionalProperties: false
                    description: The new secret of the application
                    required:
                      - secret
                    properties:
                      secret: *ref_94
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '500': *ref_334
  /application-info/installed-tenants:
    get:
      summary: List of tenants installed for the application
      description: >
        Lists the tenants installed for the application. This endpoint can only
        be called from the application itself, with an access token. It gets the
        access token via the client credentials flow. The access token is not
        associated with a tenant.
      tags:
        - application-info
      x-olt-permissions: []
      parameters:
        - *ref_340
        - *ref_341
      responses:
        '200':
          description: Success - List of installed tenants
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_329
                  data: *ref_343
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '500': *ref_334
  /application-info/installation:
    get:
      summary: Get installation details for current application
      description: >
        Determines the installation details for the client-tenant-combination
        given by the provided access token.

        Must be called with access token
      tags:
        - application-info
      x-olt-permissions: []
      responses:
        '200':
          description: Success - Installation details
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data: *ref_344
        '401': *ref_332
        '404': *ref_337
        '500': *ref_334
  /applications:
    get:
      summary: List available applications
      description: >
        Lists all applications available for the tenant. This includes both the
        currently installed applications of the tenant and the applications
        available for installation. By using the `installed` query parameter the
        response can be filtered for only installed applications. The tenant is
        extracted from the current user session.

        * Ordered by the creation date of the applications
      tags:
        - applications
      x-olt-permissions:
        - 'applications:read'
      parameters:
        - *ref_345
        - *ref_340
        - *ref_341
      responses:
        '200':
          description: Success - List of applications
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_329
                  data:
                    type: array
                    description: List of applications
                    items: *ref_346
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '500': *ref_334
  '/applications/{applicationId}':
    get:
      summary: Get details for application
      description: |
        Get detailed information for the available or installed application.
      tags:
        - applications
      x-olt-permissions:
        - 'applications:read'
      parameters:
        - *ref_335
      responses:
        '200':
          description: Success - Application Details
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_346
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '500': *ref_334
  '/applications/{applicationId}/installation':
    post:
      summary: Install an application
      description: >
        Installs the application for the requesting tenant. The request must
        contain the full set of user and client permissions that are assigned to
        the application, otherwise the installation will fail. If an
        installation for that application already exists the request will fail.
      tags:
        - applications
      x-olt-permissions:
        - 'applications:write'
      parameters:
        - *ref_335
      requestBody:
        content:
          application/json:
            schema: *ref_347
      responses:
        '201':
          description: Success - Application installed
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_344
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '409': *ref_348
        '500': *ref_334
    get:
      summary: Get installation details
      description: |
        Fetch details of an application installation.
      tags:
        - applications
      x-olt-permissions:
        - 'applications:read'
      parameters:
        - *ref_335
      responses:
        '200':
          description: Success - Installation details
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_344
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '500': *ref_334
    patch:
      summary: Update an installation
      description: >
        Updates and re-consents an installation. The request must contain the
        full set of user and client permissions that are assigned to the
        application, otherwise the request will fail. If an installation for
        that application doesn't exist the request will fail.
      tags:
        - applications
      x-olt-permissions:
        - 'applications:write'
      parameters:
        - *ref_335
      requestBody:
        content:
          application/json:
            schema: *ref_349
      responses:
        '200':
          description: Success - Application installation updated
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_344
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '409': *ref_348
        '500': *ref_334
    delete:
      summary: Uninstall application
      description: >
        Uninstalls the application assigned to the tenant. Once the application
        has been uninstalled, it cannot access any data of the tenant anymore.
      tags:
        - applications
      x-olt-permissions:
        - 'applications:write'
      parameters:
        - *ref_335
      responses:
        '204':
          description: Success - Application uninstalled
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '500': *ref_334
  '/applications/{applicationId}/permissions':
    get:
      summary: Get permissions for application
      description: |
        Fetch permissions that is required by application
      tags:
        - applications
      x-olt-permissions:
        - 'applications:read'
      parameters:
        - *ref_335
      responses:
        '200':
          description: Success - Application permissions
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data: *ref_96
        '400': *ref_331
        '401': *ref_332
        '403': *ref_333
        '404': *ref_337
        '500': *ref_334
  /notifications:
    get:
      x-olt-permissions:
        - 'notification:read'
      summary: Retrieve tenant notifications
      description: >
        Retrieves a list of notifications containing filter information as well
        as notification template.


        By default the list is sorted by creation datetime in **descending**
        order. So, most recently created entry goes first.
      tags:
        - notifications
      security:
        - oAuthSample: []
      parameters:
        - &ref_358
          name: page
          description: The number of the result page starting with 0.
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - &ref_359
          name: pageSize
          description: The number of result per page.
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Success - A notifications list.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta: *ref_350
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - notificationId
                            - active
                          properties:
                            notificationId: *ref_120
                            active:
                              type: boolean
                        - *ref_351
        '400':
          description: Bad request
          content:
            application/json:
              schema: *ref_149
        '401': *ref_352
        '403': *ref_353
        '500': *ref_354
    post:
      x-olt-permissions:
        - 'notification:write'
      summary: Create notification
      description: |
        Request a new notification to be created.
      tags:
        - notifications
      security:
        - oAuthSample: []
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_351
      responses:
        '200':
          description: Success - A notification has been created.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - type: object
                        required:
                          - notificationId
                          - active
                        properties:
                          notificationId: *ref_120
                          active:
                            type: boolean
                      - *ref_351
        '400': *ref_355
        '401': *ref_352
        '403': *ref_353
        '500': *ref_354
  '/notifications/{notificationId}':
    get:
      x-olt-permissions:
        - 'notification:read'
      summary: Retrieve notification
      description: >
        Retrieves the notification containing filter information as well as
        notification template.
      tags:
        - notifications
      security:
        - oAuthSample: []
      parameters:
        - *ref_356
      responses:
        '200':
          description: Success - The notification.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - type: object
                        required:
                          - notificationId
                          - active
                        properties:
                          notificationId: *ref_120
                          active:
                            type: boolean
                      - *ref_351
        '401': *ref_352
        '403': *ref_353
        '404': *ref_357
        '500': *ref_354
    put:
      x-olt-permissions:
        - 'notification:write'
      summary: Update notification
      description: >-
        Request the notification to be updated.


        **With PUT it is expected that the complete notification blob is
        transferred with the request.**
      tags:
        - notifications
      security:
        - oAuthSample: []
      parameters:
        - *ref_356
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - active
                  properties:
                    active:
                      type: boolean
                - *ref_351
      responses:
        '204':
          description: Success - The notification has been updated.
        '400': *ref_355
        '401': *ref_352
        '403': *ref_353
        '404': *ref_357
        '500': *ref_354
    patch:
      x-olt-permissions:
        - 'notification:write'
      summary: Update notification
      description: >-
        Request the notification to be updated.


        **With PATCH it is expected that a subset of the notification blob is
        transferred with the request.**

        For example, it could be only `eventFilter` or it could be combined with
        `notificationTemplate` and/or any other field.
      tags:
        - notifications
      security:
        - oAuthSample: []
      parameters:
        - *ref_356
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  properties:
                    active:
                      type: boolean
                - *ref_351
              example:
                active: false
                notificationTemplate:
                  notificationTopic: alert!
                notificationFilter:
                  eventFilter:
                    deviceEvent:
                      - overheated
                      - maintenance
      responses:
        '204':
          description: Success - The notification has been updated.
        '400': *ref_355
        '401': *ref_352
        '403': *ref_353
        '404': *ref_357
        '500': *ref_354
    delete:
      x-olt-permissions:
        - 'notification:write'
      summary: Delete notification
      description: |
        Request the notification to be deleted.
      tags:
        - notifications
      security:
        - oAuthSample: []
      parameters:
        - *ref_356
      responses:
        '204':
          description: Success - The notification has been deleted.
        '401': *ref_352
        '403': *ref_353
        '404': *ref_357
        '500': *ref_354
  /notifications/history:
    get:
      x-olt-permissions:
        - 'notification:read'
      summary: Retrieve tenants notification history
      description: >
        Retrieves a list of all triggered notifications containing timestamp,
        what triggered notification and notification itself.


        By default the list is sorted by creation datetime in **descending**
        order. So, most recently created entry goes first.
      tags:
        - notifications
      security:
        - oAuthSample: []
      parameters:
        - *ref_358
        - *ref_359
        - in: query
          name: notificationId
          schema:
            type: array
            example:
              - 83b8c2a8-2e54-4ad0-8e96-313f99d433e3
              - abff5e9a-072d-4d4c-94f7-fd3515026bce
            description: Optional parameter to filter the list for certain notification ids
            items:
              type: string
      responses:
        '200':
          description: Success - The notification history for a tenant.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  meta: *ref_350
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - historyId
                          properties:
                            historyId: *ref_139
                        - *ref_360
        '400':
          description: Bad request
          content:
            application/json:
              schema: *ref_149
        '401': *ref_352
        '403': *ref_353
        '500': *ref_354
  /rules:
    post:
      tags:
        - rule-engine
      summary: Create a new rule
      description: >
        Creates a rule for a list of `paths`, which are applied for a list of
        devices filtered by a `deviceFilter`, that will be aggregated and
        compared against a predefined `constant`. Rule will check and trigger
        for each matching device and path separately. If the `constant`
        threshold is met during a provided `duration`, an `event` will be
        triggered, but no more than once every `triggerInterval` seconds per
        device and path. Rules are `active` by default, otherwise they won't be
        processed or trigger events. If a rule has `triggerRepeating` set to
        `false`, it has to leave the trigger condition before it can trigger
        again. In either case there will be at least a `triggerInterval` seconds
        pause before it is able to trigger again. If a rule has an `exitEvent`,
        that event will be triggered once when the rule leaves the trigger
        condition.

        NOTE:
          - **The specified `path` must have a reporting rule to `flow` on the `device-type`.** Otherwise, no incoming data
            points would be routed to the rule-engine and the rule would not get executed at all.
          - No checks are made about the datatype of the specified `paths` at the rule creation time,
            if the path does not contain a numeric value for a device, it will be ignored,
            corresponding message will be sent to device-diagnostics.
          - No checks are made about the existence of the specified `event` and `exitEvent` at rule creation time.
            If any of the events are not specified in the device type spec of a matching device,
            the resulting event will be rejected and a corresponding message will be sent to `device-diagnostics`.
          - The event will be triggered without any payload, so it must not have any properties in its schema definition
            of the device type.
          - If `event` or `exitEvent` is "ruleTriggerStart" or "ruleTriggerEnd", the corresponding device events, produced
            by the Rule Engine, will not go through enrichment service and will not be validated against the device schema,
            also the resulting events will include `ruleId`, so they can be directly targeted by the notification service
      x-olt-permissions:
        - 'rule_engine_data:write'
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_361
      responses:
        '201':
          description: Success - created rule
          content:
            application/json:
              schema:
                allOf:
                  - *ref_122
                  - *ref_362
        '400': &ref_367
          description: Bad Request.
          content:
            application/json:
              schema:
                allOf:
                  - &ref_363
                    type: object
                    required:
                      - errorMessage
                    additionalProperties: false
                    properties:
                      errorMessage:
                        type: string
                        description: Error message with futher details.
                  - type: object
                    required:
                      - errorCode
                    additionalProperties: false
                    properties:
                      errorCode:
                        type: string
                        enum:
                          - RULEENGINE_VALIDATION
        '401': &ref_368
          description: Request unauthorized.
          content:
            application/json:
              schema:
                allOf:
                  - *ref_363
                  - type: object
                    required:
                      - errorCode
                    additionalProperties: false
                    properties:
                      errorCode:
                        type: string
                        enum:
                          - RULEENGINE_UNAUTHORIZED
        '403': &ref_369
          description: Access forbidden.
          content:
            application/json:
              schema:
                allOf:
                  - *ref_363
                  - type: object
                    required:
                      - errorCode
                    additionalProperties: false
                    properties:
                      errorCode:
                        type: string
                        enum:
                          - RULEENGINE_NO_ACCESS_TO_RESOURCE
        '500': &ref_370
          description: Internal Server Error response.
    get:
      tags:
        - rule-engine
      summary: List existing rules
      description: >
        This endpoint returns a list of rules. Consumer can specify requested
        page and the number of entries per page. The sort order is
        alphabetically ascending by name.
      x-olt-permissions:
        - 'rule_engine_data:read'
      parameters:
        - *ref_364
        - *ref_365
        - *ref_366
        - name: path
          in: query
          required: false
          description: JSON Path for the attribute or configuration.
          schema:
            type: string
            pattern: ^(\$\.configuration\.|\$\.attributes\.)
            example: $.configuration.brightness
            description: JSON Path for the attribute or configuration.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  meta: &ref_376
                    type: object
                    description: common meta data for the payload.
                    required:
                      - page
                      - pageSize
                    additionalProperties: false
                    properties:
                      page:
                        type: integer
                        description: The actual returned number of the page.
                      pageSize:
                        type: integer
                        description: The used page size.
                      itemsTotal:
                        type: integer
                        description: Total number of items.
                      pagesTotal:
                        type: integer
                        description: Total number of pages with current size.
                  data:
                    type: array
                    items:
                      allOf:
                        - *ref_122
                        - *ref_362
        '400': *ref_367
        '401': *ref_368
        '403': *ref_369
        '500': *ref_370
    delete:
      tags:
        - rule-engine
      summary: Remove all existing rules
      description: This endpoint deletes all rules of the current tenant.
      x-olt-permissions:
        - 'rule_engine_data:write'
      responses:
        '204':
          description: Rules deleted
        '401': *ref_368
        '500': *ref_370
  '/rules/{ruleId}':
    patch:
      tags:
        - rule-engine
      summary: Modify an existing rule
      description: >
        This endpoint edits the rule definition. See information from the
        creation endpoint.
      parameters:
        - *ref_371
      x-olt-permissions:
        - 'rule_engine_data:write'
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_372
      responses:
        '200':
          description: Success - updated the rule definition
          content:
            application/json:
              schema:
                allOf:
                  - *ref_122
                  - *ref_362
        '400': *ref_367
        '401': *ref_368
        '403': *ref_369
        '404': &ref_373
          description: Resource not found.
          content:
            application/json:
              schema:
                allOf:
                  - *ref_363
                  - type: object
                    required:
                      - errorCode
                    additionalProperties: false
                    properties:
                      errorCode:
                        type: string
                        enum:
                          - RULEENGINE_RESOURCE_NOT_FOUND
        '500': *ref_370
    delete:
      tags:
        - rule-engine
      summary: Remove an existing rule
      description: Delete a rule by its UUID
      x-olt-permissions:
        - 'rule_engine_data:write'
      parameters:
        - *ref_371
      responses:
        '204':
          description: Rule deleted
        '401': *ref_368
        '403': *ref_369
        '404': *ref_373
        '500': *ref_370
    get:
      tags:
        - rule-engine
      summary: Get an existing rule
      description: Get a rule by its UUID
      parameters:
        - *ref_371
      x-olt-permissions:
        - 'rule_engine_data:read'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - *ref_122
                  - *ref_362
        '401': *ref_368
        '403': *ref_369
        '404': *ref_373
        '500': *ref_370
  '/rules/{ruleId}/executions':
    get:
      tags:
        - rule-engine
      summary: List rule executions
      description: >-
        Returns a list of previous executions for a rule, ordered by last
        execution date from newest to oldest.
      x-olt-permissions:
        - 'rule_engine_data:read'
      parameters:
        - *ref_371
        - *ref_374
        - *ref_375
        - *ref_364
        - *ref_365
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  meta: *ref_376
                  data:
                    type: array
                    items:
                      allOf:
                        - *ref_377
        '400': *ref_367
        '401': *ref_368
        '403': *ref_369
        '404': *ref_373
        '500': *ref_370
  /audit-logs:
    get:
      summary: Export Audit Logs
      description: >
        Access available audit logs of your tenant. <br /> <br /> When using a
        `application/json` mime type, audit logs with pagination will be
        returned. <br /> <br /> When using the `text/csv` mime type, the content
        is a comma separated csv file, containing all available audit logs,
        where its first line are the column names. All properties which are
        available as json are also listed here in the csv.
      tags:
        - audit-logs
      x-olt-permissions:
        - 'audit_logs:read'
      parameters:
        - name: page
          description: The requested page
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: pageSize
          description: The amount of results per page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - meta
                  - data
                properties:
                  meta:
                    type: object
                    additionalProperties: false
                    description: common meta data for the payload.
                    required:
                      - page
                      - pageSize
                      - itemsTotal
                      - pagesTotal
                    properties:
                      page:
                        type: integer
                        description: The actual returned number of the page.
                      pageSize:
                        type: integer
                        description: The used page size.
                      itemsTotal:
                        type: integer
                        description: The total size of the data requested
                      pagesTotal:
                        type: integer
                        description: >-
                          The total number of available pages calculated from
                          pageSize and itemsTotal
                  data: *ref_378
            text/csv:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema: *ref_379
              example:
                errorCode: VALIDATION
                errorMessage: Request Body has to follow schemas
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: *ref_379
              example:
                errorCode: UNAUTHORIZED
                errorMessage: Authorization missing in the header
        '403':
          description: Forbidden
          content:
            application/json:
              schema: *ref_379
              example:
                errorCode: FORBIDDEN
                errorMessage: Invalid tenantid provided in access token
        '500':
          description: Internal Server Error
  /timeseries:
    post:
      tags:
        - timeseries
      summary: Add timeseries
      description: Create timeseries for tenant
      x-olt-permissions:
        - 'timeseries:write'
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_380
      responses:
        '201':
          description: Success - timeseries added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_124
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '500': *ref_384
    get:
      tags:
        - timeseries
      summary: List all timeseries for tenant
      description: |
        Get list of available timeseries, ordered by created date descending.
      x-olt-permissions:
        - 'timeseries:read'
      parameters:
        - *ref_385
        - *ref_386
      requestBody:
        content:
          application/json:
            schema: *ref_130
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta: *ref_127
                  data:
                    type: array
                    items: *ref_124
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '500': *ref_384
  '/timeseries/{timeseriesId}':
    get:
      tags:
        - timeseries
      x-olt-permissions:
        - 'timeseries:read'
      summary: Get timeseries
      description: Get a specific timeseries type by UUID
      parameters:
        - *ref_387
      responses:
        '200':
          description: Success - requested timeseries.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_124
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
    patch:
      tags:
        - timeseries
      x-olt-permissions:
        - 'timeseries:write'
      summary: Modify timeseries
      description: Edit a specific timeseries by UUID partially. UUID is not patchable.
      parameters:
        - *ref_387
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_389
      responses:
        '200':
          description: Success - edited timeseries.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_124
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
    delete:
      tags:
        - timeseries
      x-olt-permissions:
        - 'timeseries:write'
      summary: Remove timeseries
      description: Delete a specific timeseries by UUID.
      parameters:
        - *ref_387
      responses:
        '204':
          description: Success - deleted timeseries.
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
  '/timeseries/{timeseriesId}/points':
    post:
      tags:
        - timeseries
      summary: Add timeseries data points
      description: Create data points (one or more) for specific timeseries (ingest)
      x-olt-permissions:
        - 'timeseries_data:write'
      parameters:
        - *ref_387
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_390
      responses:
        '201':
          description: Success - timeseries data point added.
          content:
            application/json:
              schema: *ref_390
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
    delete:
      tags:
        - timeseries
      x-olt-permissions:
        - 'timeseries_data:write'
      summary: Delete data points of timeseries
      description: >
        Delete reported data points of a timeseries belonging to the given UUID.
        This deletes both the timeseries and its aggregation. If no timeframe is
        provided, all data is deleted.
      parameters:
        - *ref_387
        - *ref_391
        - *ref_392
      responses:
        '204':
          description: Success.
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
  '/timeseries/{timeseriesId}/points/last':
    get:
      tags:
        - timeseries
      summary: Get last hour of data points for the timeseries
      description: >
        Get data points for the last hour, as reported for the timeseries. Data
        will be returned in an descending order. Maximum 4000 data points are
        returned. **NOTE:** This endpoint should be used by the user only for
        debugging his timeseries.
      x-olt-permissions:
        - 'timeseries_data:read'
      parameters:
        - *ref_387
      responses:
        '200':
          description: Success - timeseries data points.
          content:
            application/json:
              schema: *ref_390
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
  '/timeseries/{timeseriesId}/points/aggregated':
    get:
      tags:
        - timeseries
      summary: Get aggregated data points for the timeseries
      description: >
        Get aggregated data points for the timeseries. Data will be returned in
        an descending order. Each page will contain at most 4000 entries, it
        might contain less entries if some of the time-frames from the interval
        did not have any data points.
      x-olt-permissions:
        - 'timeseries_data:read'
      parameters:
        - *ref_387
        - *ref_393
        - *ref_394
        - *ref_395
        - *ref_396
        - *ref_385
        - *ref_386
      responses:
        '200':
          description: Success - timeseries data points.
          content:
            application/json:
              schema: *ref_397
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
  /timeseries/aggregated-data:
    post:
      tags:
        - timeseries
      x-olt-permissions:
        - 'timeseries_data:read'
      summary: Get aggregated timeseries for matching timeseries
      description: >
        Get aggregated data points for the timeseries matching the given
        filters. Data will be returned in descending order.
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_398
      responses:
        '202':
          description: Request accepted
          headers:
            Location:
              description: Url of the current request status
              schema:
                type: string
              example: >-
                https://api.lightelligence.io/v1/timeseries/requests/351ff402-2a9b-4d22-9066-97c976c50298
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
  /timeseries/raw-data:
    post:
      tags:
        - timeseries
      summary: Request raw data points for timeseries
      description: >
        Request a file with raw data points, as reported by the timeseries
        matching the given filters.
      x-olt-permissions:
        - 'timeseries_data:read'
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_399
      responses:
        '202':
          description: Request accepted
          headers:
            Location:
              description: Url of the current request status
              schema:
                type: string
              example: >-
                https://api.lightelligence.io/v1/timeseries/requests/351ff402-2a9b-4d22-9066-97c976c50298
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
  '/timeseries/requests/{requestId}':
    get:
      x-olt-permissions:
        - 'timeseries_data:read'
      summary: Get the status of the raw data point file creation
      description: >
        Return a status of a timeseries file that's being created
        asynchronously.
      tags:
        - timeseries
      security:
        - oAuthSample: []
      parameters:
        - *ref_400
      responses:
        '200':
          description: The file is still being created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: *ref_401
        '303':
          description: The file was created.
          headers:
            Location:
              description: The url of the created file.
              schema:
                type: string
              example: >-
                https://api.lightelligence.io/v1/timeseries/files/351ff402-2a9b-4d22-9066-97c976c50298
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
  '/timeseries/files/{fileId}':
    get:
      x-olt-permissions:
        - 'timeseries_data:read'
      summary: Download generated file for the matching timeseries
      description: >
        Return a timeseries file created asynchronously via a POST request. All
        created files will expire 1 hour after they are created.
      tags:
        - timeseries
      security:
        - oAuthSample: []
      parameters:
        - *ref_402
      responses:
        '200':
          description: A JSON file
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      nextRequestUrl:
                        description: >
                          The URL of the request status of the file with the
                          next part of raw data points. If empty - there is no
                          more data.
                        type: string
                  data:
                    type: array
                    items: *ref_403
        '400': *ref_381
        '401': *ref_382
        '403': *ref_383
        '404': *ref_388
        '500': *ref_384
